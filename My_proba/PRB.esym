D G "__PCM__" 0 154 ""5.049""
D G "__DEVICE__" 0 154 "73"
D G "__DATE__" 0 154 ""13-èþë-19""
D G "__TIME__" 0 154 ""19:10:15""
D G "_UNICODE" 0 154 ""?""
D G "__EVAL" 0 154 ""?"" "Standard Header file for the PIC16C73B device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
f N "set_tris_a" 2 35 ""
v L "value" 2 35 "int8" `53 
f B "set_tris_a" 2 35 "void(int8 value)" `52 
f N "set_tris_b" 2 36 ""
v L "value" 2 36 "int8" `55 
f B "set_tris_b" 2 36 "void(int8 value)" `54 
f N "set_tris_c" 2 37 ""
v L "value" 2 37 "int8" `57 
f B "set_tris_c" 2 37 "void(int8 value)" `56 
f N "get_tris_a" 2 38 ""
f B "get_tris_a" 2 38 "int8()" `58 
f N "get_tris_b" 2 39 ""
f B "get_tris_b" 2 39 "int8()" `59 
f N "get_tris_c" 2 40 ""
f B "get_tris_c" 2 40 "int8()" `60 
f N "output_a" 2 41 ""
v L "value" 2 41 "int8" `62 
f B "output_a" 2 41 "void(int8 value)" `61 
f N "output_b" 2 42 ""
v L "value" 2 42 "int8" `64 
f B "output_b" 2 42 "void(int8 value)" `63 
f N "output_c" 2 43 ""
v L "value" 2 43 "int8" `66 
f B "output_c" 2 43 "void(int8 value)" `65 
f N "input_a" 2 44 ""
f B "input_a" 2 44 "int8()" `67 
f N "input_b" 2 45 ""
f B "input_b" 2 45 "int8()" `68 
f N "input_c" 2 46 ""
f B "input_c" 2 46 "int8()" `69 
f N "input_change_a" 2 47 ""
f B "input_change_a" 2 47 "int8()" `70 
f N "input_change_b" 2 48 ""
f B "input_change_b" 2 48 "int8()" `71 
f N "input_change_c" 2 49 ""
f B "input_change_c" 2 49 "int8()" `72 
f N "port_b_pullups" 2 50 ""
v L "value" 2 50 "int8" `74 
f B "port_b_pullups" 2 50 "void(int8 value)" `73 
f N "input" 2 51 ""
v L "pin" 2 51 "int16" `76 
f B "input" 2 51 "int8(int16 pin)" `75 
f N "input_state" 2 52 ""
v L "pin" 2 52 "int16" `78 
f B "input_state" 2 52 "int8(int16 pin)" `77 
f N "output_low" 2 53 ""
v L "pin" 2 53 "int16" `80 
f B "output_low" 2 53 "void(int16 pin)" `79 
f N "output_high" 2 54 ""
v L "pin" 2 54 "int16" `82 
f B "output_high" 2 54 "void(int16 pin)" `81 
f N "output_toggle" 2 55 ""
v L "pin" 2 55 "int16" `84 
f B "output_toggle" 2 55 "void(int16 pin)" `83 
f N "output_bit" 2 56 ""
v L "pin" 2 56 "int16" `86 
v L "level" 2 56 "int8" `87 
f B "output_bit" 2 56 "void(int16 pin,int8 level)" `85 
f N "output_float" 2 57 ""
v L "pin" 2 57 "int16" `89 
f B "output_float" 2 57 "void(int16 pin)" `88 
f N "output_drive" 2 58 ""
v L "pin" 2 58 "int16" `91 
f B "output_drive" 2 58 "void(int16 pin)" `90  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 62 "40"
d G "PIN_A1" 2 63 "41"
d G "PIN_A2" 2 64 "42"
d G "PIN_A3" 2 65 "43"
d G "PIN_A4" 2 66 "44"
d G "PIN_A5" 2 67 "45"
d G "PIN_B0" 2 69 "48"
d G "PIN_B1" 2 70 "49"
d G "PIN_B2" 2 71 "50"
d G "PIN_B3" 2 72 "51"
d G "PIN_B4" 2 73 "52"
d G "PIN_B5" 2 74 "53"
d G "PIN_B6" 2 75 "54"
d G "PIN_B7" 2 76 "55"
d G "PIN_C0" 2 78 "56"
d G "PIN_C1" 2 79 "57"
d G "PIN_C2" 2 80 "58"
d G "PIN_C3" 2 81 "59"
d G "PIN_C4" 2 82 "60"
d G "PIN_C5" 2 83 "61"
d G "PIN_C6" 2 84 "62"
d G "PIN_C7" 2 85 "63"
d G "FALSE" 2 88 "0"
d G "TRUE" 2 89 "1"
d G "BYTE" 2 91 "int8"
d G "BOOLEAN" 2 92 "int1"
d G "getc" 2 94 "getch"
d G "fgetc" 2 95 "getch"
d G "getchar" 2 96 "getch"
d G "putc" 2 97 "putchar"
d G "fputc" 2 98 "putchar"
d G "fgets" 2 99 "gets"
d G "fputs" 2 100 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f N "restart_cause" 2 105 ""
f B "restart_cause" 2 105 "int8()" `92 
f N "reset_cpu" 2 106 ""
f B "reset_cpu" 2 106 "void()" `93 
f N "sleep" 2 107 ""
f B "sleep" 2 107 "void()" `94  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 109 "3"
d G "WDT_TIMEOUT" 2 110 "11"
d G "MCLR_FROM_SLEEP" 2 111 "19"
d G "MCLR_FROM_RUN" 2 112 "27"
d G "NORMAL_POWER_UP" 2 113 "25"
d G "BROWNOUT_RESTART" 2 114 "26"
c L "sleep" 2 3 5 "FUNCTION"
f N "setup_timer_0" 2 121 ""
v L "mode" 2 121 "int8" `96 
f B "setup_timer_0" 2 121 "void(int8 mode)" `95 
f N "set_timer0" 2 122 ""
v L "value" 2 122 "int8" `98 
f B "set_timer0" 2 122 "void(int8 value)" `97 
f N "get_timer0" 2 123 ""
f B "get_timer0" 2 123 "int8()" `99 
f N "setup_counters" 2 124 ""
v L "mode" 2 124 "int8" `101 
v L "prescaler" 2 124 "int8" `102 
f B "setup_counters" 2 124 "void(int8 mode,int8 prescaler)" `100 
f N "set_rtcc" 2 125 ""
v L "value" 2 125 "int8" `104 
f B "set_rtcc" 2 125 "void(int8 value)" `103 
f N "get_rtcc" 2 126 ""
f B "get_rtcc" 2 126 "int8()" `105  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 128 "0"
d G "T0_EXT_L_TO_H" 2 129 "32"
d G "T0_EXT_H_TO_L" 2 130 "48"
d G "T0_DIV_1" 2 132 "8"
d G "T0_DIV_2" 2 133 "0"
d G "T0_DIV_4" 2 134 "1"
d G "T0_DIV_8" 2 135 "2"
d G "T0_DIV_16" 2 136 "3"
d G "T0_DIV_32" 2 137 "4"
d G "T0_DIV_64" 2 138 "5"
d G "T0_DIV_128" 2 139 "6"
d G "T0_DIV_256" 2 140 "7"
d G "T0_8_BIT" 2 143 "0"
d G "RTCC_INTERNAL" 2 147 "0"
d G "RTCC_EXT_L_TO_H" 2 148 "32"
d G "RTCC_EXT_H_TO_L" 2 149 "48"
d G "RTCC_DIV_1" 2 150 "8"
d G "RTCC_DIV_2" 2 151 "0"
d G "RTCC_DIV_4" 2 152 "1"
d G "RTCC_DIV_8" 2 153 "2"
d G "RTCC_DIV_16" 2 154 "3"
d G "RTCC_DIV_32" 2 155 "4"
d G "RTCC_DIV_64" 2 156 "5"
d G "RTCC_DIV_128" 2 157 "6"
d G "RTCC_DIV_256" 2 158 "7"
d G "RTCC_8_BIT" 2 159 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
f N "setup_wdt" 2 170 ""
v L "mode" 2 170 "int16" `107 
f B "setup_wdt" 2 170 "void(int16 mode)" `106 
f N "restart_wdt" 2 171 ""
f B "restart_wdt" 2 171 "void()" `108  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 174 "8"
d G "WDT_36MS" 2 175 "9"
d G "WDT_72MS" 2 176 "10"
d G "WDT_144MS" 2 177 "11"
d G "WDT_288MS" 2 178 "12"
d G "WDT_576MS" 2 179 "13"
d G "WDT_1152MS" 2 180 "14"
d G "WDT_2304MS" 2 181 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
f N "setup_timer_1" 2 187 ""
v L "mode" 2 187 "int16" `110 
f B "setup_timer_1" 2 187 "void(int16 mode)" `109 
f N "get_timer1" 2 188 ""
f B "get_timer1" 2 188 "int16()" `111 
f N "set_timer1" 2 189 ""
v L "value" 2 189 "int16" `113 
f B "set_timer1" 2 189 "void(int16 value)" `112  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 192 "0"
d G "T1_INTERNAL" 2 193 "0x85"
d G "T1_EXTERNAL" 2 194 "0x87"
d G "T1_EXTERNAL_SYNC" 2 195 "0x83"
d G "T1_CLK_OUT" 2 197 "8"
d G "T1_DIV_BY_1" 2 199 "0"
d G "T1_DIV_BY_2" 2 200 "0x10"
d G "T1_DIV_BY_4" 2 201 "0x20"
d G "T1_DIV_BY_8" 2 202 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
f N "setup_timer_2" 2 207 ""
v L "mode" 2 207 "int8" `115 
v L "period" 2 207 "int8" `116 
v L "postscale" 2 207 "int8" `117 
f B "setup_timer_2" 2 207 "void(int8 mode,int8 period,int8 postscale)" `114 
f N "get_timer2" 2 208 ""
f B "get_timer2" 2 208 "int8()" `118 
f N "set_timer2" 2 209 ""
v L "value" 2 209 "int8" `120 
f B "set_timer2" 2 209 "void(int8 value)" `119  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 211 "0"
d G "T2_DIV_BY_1" 2 212 "4"
d G "T2_DIV_BY_4" 2 213 "5"
d G "T2_DIV_BY_16" 2 214 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
f N "setup_ccp1" 2 220 ""
v L "mode" 2 220 "int32" `122 
f B "setup_ccp1" 2 220 "void(int32 mode)" `121 
f N "setup_ccp1" 2 221 ""
v L "mode" 2 221 "int32" `124 
v L "pwm" 2 221 "int8" `125 
f B "setup_ccp1" 2 221 "void(int32 mode,int8 pwm)" `123 
f N "set_pwm1_duty" 2 222 ""
v L "value" 2 222 "int16" `127 
f B "set_pwm1_duty" 2 222 "void(int16 value)" `126  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 224 "0"
d G "CCP_CAPTURE_FE" 2 225 "0x04"
d G "CCP_CAPTURE_RE" 2 226 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 227 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 228 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 229 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 230 "0x09"
d G "CCP_COMPARE_INT" 2 231 "0x0A"
d G "CCP_COMPARE_RESET_TIMER" 2 232 "0x0B"
d G "CCP_PWM" 2 233 "0x0C"
d G "CCP_PWM_PLUS_1" 2 234 "0x1c"
d G "CCP_PWM_PLUS_2" 2 235 "0x2c"
d G "CCP_PWM_PLUS_3" 2 236 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
f N "setup_ccp2" 2 243 ""
v L "mode" 2 243 "int32" `132 
f B "setup_ccp2" 2 243 "void(int32 mode)" `131 
f N "setup_ccp2" 2 244 ""
v L "mode" 2 244 "int32" `134 
v L "pwm" 2 244 "int8" `135 
f B "setup_ccp2" 2 244 "void(int32 mode,int8 pwm)" `133 
f N "set_pwm2_duty" 2 245 ""
v L "value" 2 245 "int16" `137 
f B "set_pwm2_duty" 2 245 "void(int16 value)" `136 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
f N "setup_spi" 2 252 ""
v L "mode" 2 252 "int32" `142 
f B "setup_spi" 2 252 "void(int32 mode)" `141 
f N "spi_write" 2 253 ""
v L "value" 2 253 "int8" `144 
f B "spi_write" 2 253 "void(int8 value)" `143 
f N "spi_read" 2 254 ""
f B "spi_read" 2 254 "int8()" `145 
f N "spi_read" 2 255 ""
v L "value" 2 255 "int8" `147 
f B "spi_read" 2 255 "int8(int8 value)" `146 
f N "spi_data_in" 2 256 ""
f B "spi_data_in" 2 256 "int8()" `148  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 258 "0x00"
d G "SPI_MASTER" 2 259 "0x20"
d G "SPI_SLAVE" 2 260 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 261 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 262 "0x00"
d G "SPI_CLK_DIV_4" 2 263 "0x00"
d G "SPI_CLK_DIV_16" 2 264 "0x01"
d G "SPI_CLK_DIV_64" 2 265 "0x02"
d G "SPI_CLK_T2" 2 266 "0x03"
d G "SPI_SS_DISABLED" 2 267 "0x01"
d G "SPI_L_TO_H" 2 270 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 271 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
f N "setup_uart" 2 275 ""
v L "baud" 2 275 "int32" `150 
f B "setup_uart" 2 275 "void(int32 baud)" `149 
f N "setup_uart" 2 276 ""
v L "baud" 2 276 "int32" `152 
v L "stream" 2 276 "int8" `153 
f B "setup_uart" 2 276 "void(int32 baud,int8 stream)" `151 
f N "setup_uart" 2 277 ""
v L "baud" 2 277 "int32" `155 
v L "stream" 2 277 "int8" `156 
v L "clock" 2 277 "int32" `157 
f B "setup_uart" 2 277 "void(int32 baud,int8 stream,int32 clock)" `154 
f N "set_uart_speed" 2 278 ""
v L "baud" 2 278 "int32" `159 
f B "set_uart_speed" 2 278 "void(int32 baud)" `158 
f N "set_uart_speed" 2 279 ""
v L "baud" 2 279 "int32" `161 
v L "stream" 2 279 "int8" `162 
f B "set_uart_speed" 2 279 "void(int32 baud,int8 stream)" `160 
f N "set_uart_speed" 2 280 ""
v L "baud" 2 280 "int32" `164 
v L "stream" 2 280 "int8" `165 
v L "clock" 2 280 "int32" `166 
f B "set_uart_speed" 2 280 "void(int32 baud,int8 stream,int32 clock)" `163  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 284 "2"
d G "UART_DATA" 2 285 "4"
c L "set_uart_speed" 2 3 4 "FUNCTION"
f N "setup_adc" 2 291 ""
v L "mode" 2 291 "int16" `168 
f B "setup_adc" 2 291 "void(int16 mode)" `167 
f N "read_adc" 2 292 ""
f B "read_adc" 2 292 "int8()" `169 
f N "read_adc" 2 293 ""
v L "mode" 2 293 "int8" `171 
f B "read_adc" 2 293 "int8(int8 mode)" `170 
f N "read_adc" 2 294 ""
f B "read_adc" 2 294 "int16()" `172 
f N "read_adc" 2 295 ""
v L "mode" 2 295 "int8" `173 
f B "read_adc" 2 295 "int16(int8 mode,int8 setting)" `172 
f N "adc_done" 2 296 ""
f B "adc_done" 2 296 "int8(int8 mode,int8 setting)" `172  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 298 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 299 "0x100"
d G "ADC_CLOCK_DIV_8" 2 300 "0x40"
d G "ADC_CLOCK_DIV_32" 2 301 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 302 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
f N "setup_adc_ports" 2 305 ""
v L "setting" 2 305 "int8" `174 
f B "setup_adc_ports" 2 305 "void(int8 setting)" `173 
f N "set_analog_pins" 2 306 ""
v L "setting" 2 306 "int8" `176 
f B "set_analog_pins" 2 306 "void(int8 setting)" `175 
f N "set_adc_channel" 2 307 ""
v L "channel" 2 307 "int8" `178 
f B "set_adc_channel" 2 307 "void(int8 channel)" `177  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "NO_ANALOGS" 2 309 "7" "None"
d G "ALL_ANALOG" 2 310 "0" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 311 "1" "A0 A1 A2 A5 VRefh=A3"
d G "AN0_AN1_AN3" 2 312 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 313 "5" "A0 A1 VRefh=A3"
d G "ANALOG_RA3_REF" 2 314 "1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 315 "4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 316 "5" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 319 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 320 "1"
d G "ADC_READ_ONLY" 2 321 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
f N "abs" 2 327 ""
v L "x" 2 327 "sint8" `180 
f B "abs" 2 327 "sint8(sint8 x)" `179 
f N "abs" 2 328 ""
v L "x" 2 328 "sint16" `182 
f B "abs" 2 328 "sint16(sint16 x)" `181 
f N "abs" 2 329 ""
v L "x" 2 329 "sint32" `184 
f B "abs" 2 329 "sint32(sint32 x)" `183 
f N "abs" 2 330 ""
v L "x" 2 330 "float" `186 
f B "abs" 2 330 "float(float x)" `185 
f N "_mul" 2 331 ""
v L "??65535" 2 331 "int8" `188 
v L "??65535" 2 331 "int8" `189 
f B "_mul" 2 331 "int16(int8 ,int8 )" `187 
f N "_mul" 2 332 ""
v L "??65535" 2 332 "sint8" `191 
v L "??65535" 2 332 "sint8" `192 
f B "_mul" 2 332 "sint16(sint8 ,sint8 )" `190 
f N "_mul" 2 333 ""
v L "??65535" 2 333 "int16" `194 
v L "??65535" 2 333 "int16" `195 
f B "_mul" 2 333 "int32(int16 ,int16 )" `193 
f N "_mul" 2 334 ""
v L "??65535" 2 334 "sint16" `197 
v L "??65535" 2 334 "sint16" `198 
f B "_mul" 2 334 "sint32(sint16 ,sint16 )" `196  "Memory Manipulation Prototypes:"
f N "read_bank" 2 337 ""
v L "bank" 2 337 "int8" `200 
v L "offset" 2 337 "int8" `201 
f B "read_bank" 2 337 "int8(int8 bank,int8 offset)" `199 
f N "write_bank" 2 338 ""
v L "bank" 2 338 "int8" `203 
v L "offset" 2 338 "int8" `204 
v L "value" 2 338 "int8" `205 
f B "write_bank" 2 338 "void(int8 bank,int8 offset,int8 value)" `202 
f N "strcpy" 2 339 ""
v L "dest" 2 339 "*int8" `207 
v L "src" 2 339 "*int8" `208 
f B "strcpy" 2 339 "void(*int8 dest,*int8 src)" `206 
f N "memset" 2 340 ""
v L "destination" 2 340 "*int8" `210 
v L "value" 2 340 "int8" `211 
v L "num" 2 340 "int16" `212 
f B "memset" 2 340 "void(*int8 destination,int8 value,int16 num)" `209 
f N "memcpy" 2 341 ""
v L "destination" 2 341 "*int8" `214 
v L "source" 2 341 "*int8" `215 
v L "num" 2 341 "int16" `216 
f B "memcpy" 2 341 "void(*int8 destination,*int8 source,int16 num)" `213  "String Prototypes:"
f N "toupper" 2 344 ""
v L "cvalue" 2 344 "int8" `218 
f B "toupper" 2 344 "int8(int8 cvalue)" `217 
f N "tolower" 2 345 ""
v L "cvalue" 2 345 "int8" `220 
f B "tolower" 2 345 "int8(int8 cvalue)" `219 
f N "sprintf" 2 346 ""
v L "string" 2 346 "*int8" `222 
v L "cstring" 2 346 "*int8" `223 
f B "sprintf" 2 346 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `221  "Data Manipulators Prototypes:"
f N "shift_left" 2 349 ""
v L "address" 2 349 "*int8" `226 
v L "bytes" 2 349 "int8" `227 
v L "value" 2 349 "int8" `228 
f B "shift_left" 2 349 "int8(*int8 address,int8 bytes,int8 value)" `225 
f N "shift_right" 2 350 ""
v L "address" 2 350 "*int8" `230 
v L "bytes" 2 350 "int8" `231 
v L "value" 2 350 "int8" `232 
f B "shift_right" 2 350 "int8(*int8 address,int8 bytes,int8 value)" `229 
f N "rotate_left" 2 351 ""
v L "address" 2 351 "*int8" `234 
v L "bytes" 2 351 "int8" `235 
f B "rotate_left" 2 351 "void(*int8 address,int8 bytes)" `233 
f N "rotate_right" 2 352 ""
v L "address" 2 352 "*int8" `237 
v L "bytes" 2 352 "int8" `238 
f B "rotate_right" 2 352 "void(*int8 address,int8 bytes)" `236 
f N "swap" 2 353 ""
v L "value" 2 353 "int8" `240 
f B "swap" 2 353 "void(int8 value)" `239 
f N "make8" 2 354 ""
v L "var" 2 354 "int16" `242 
v L "offset" 2 354 "int8" `243 
f B "make8" 2 354 "int8(int16 var,int8 offset)" `241 
f N "make8" 2 355 ""
v L "var" 2 355 "int32" `245 
v L "offset" 2 355 "int8" `246 
f B "make8" 2 355 "int8(int32 var,int8 offset)" `244 
f N "make16" 2 356 ""
v L "varhigh" 2 356 "int8" `248 
v L "varlow" 2 356 "int8" `249 
f B "make16" 2 356 "int16(int8 varhigh,int8 varlow)" `247 
f N "make32" 2 357 ""
v L "var1" 2 357 "int16" `251 
f B "make32" 2 357 "int32(int16 var1)" `250 
f N "make32" 2 358 ""
v L "var1" 2 358 "int16" `253 
v L "var2" 2 358 "int16" `254 
f B "make32" 2 358 "int32(int16 var1,int16 var2)" `252 
f N "make32" 2 359 ""
v L "var1" 2 359 "int16" `256 
v L "var2" 2 359 "int8" `257 
f B "make32" 2 359 "int32(int16 var1,int8 var2)" `255 
f N "make32" 2 360 ""
v L "var1" 2 360 "int16" `259 
v L "var2" 2 360 "int8" `260 
v L "var3" 2 360 "int8" `261 
f B "make32" 2 360 "int32(int16 var1,int8 var2,int8 var3)" `258 
f N "make32" 2 361 ""
v L "var1" 2 361 "int8" `263 
f B "make32" 2 361 "int32(int8 var1)" `262 
f N "make32" 2 362 ""
v L "var1" 2 362 "int8" `265 
v L "var2" 2 362 "int8" `266 
f B "make32" 2 362 "int32(int8 var1,int8 var2)" `264 
f N "make32" 2 363 ""
v L "var1" 2 363 "int8" `268 
v L "var2" 2 363 "int8" `269 
v L "var3" 2 363 "int8" `270 
f B "make32" 2 363 "int32(int8 var1,int8 var2,int8 var3)" `267 
f N "make32" 2 364 ""
v L "var1" 2 364 "int8" `272 
v L "var2" 2 364 "int8" `273 
v L "var3" 2 364 "int8" `274 
v L "var4" 2 364 "int8" `275 
f B "make32" 2 364 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `271 
f N "make32" 2 365 ""
v L "var1" 2 365 "int8" `277 
v L "var2" 2 365 "int16" `278 
f B "make32" 2 365 "int32(int8 var1,int16 var2)" `276 
f N "make32" 2 366 ""
v L "var1" 2 366 "int8" `280 
v L "var2" 2 366 "int16" `281 
v L "var3" 2 366 "int8" `282 
f B "make32" 2 366 "int32(int8 var1,int16 var2,int8 var3)" `279 
f N "make32" 2 367 ""
v L "var1" 2 367 "int8" `284 
v L "var2" 2 367 "int8" `285 
v L "var3" 2 367 "int16" `286 
f B "make32" 2 367 "int32(int8 var1,int8 var2,int16 var3)" `283 
f N "bit_set" 2 368 ""
v L "var" 2 368 "int8" `288 
v L "bit" 2 368 "int8" `289 
f B "bit_set" 2 368 "void(int8 var,int8 bit)" `287 
f N "bit_set" 2 369 ""
v L "var" 2 369 "int16" `291 
v L "bit" 2 369 "int8" `292 
f B "bit_set" 2 369 "void(int16 var,int8 bit)" `290 
f N "bit_set" 2 370 ""
v L "var" 2 370 "int32" `294 
v L "bit" 2 370 "int8" `295 
f B "bit_set" 2 370 "void(int32 var,int8 bit)" `293 
f N "bit_clear" 2 371 ""
v L "var" 2 371 "int8" `297 
v L "bit" 2 371 "int8" `298 
f B "bit_clear" 2 371 "void(int8 var,int8 bit)" `296 
f N "bit_clear" 2 372 ""
v L "var" 2 372 "int16" `300 
v L "bit" 2 372 "int8" `301 
f B "bit_clear" 2 372 "void(int16 var,int8 bit)" `299 
f N "bit_clear" 2 373 ""
v L "var" 2 373 "int32" `303 
v L "bit" 2 373 "int8" `304 
f B "bit_clear" 2 373 "void(int32 var,int8 bit)" `302 
f N "bit_test" 2 374 ""
v L "var" 2 374 "int8" `306 
v L "bit" 2 374 "int8" `307 
f B "bit_test" 2 374 "int8(int8 var,int8 bit)" `305 
f N "bit_test" 2 375 ""
v L "var" 2 375 "int16" `309 
v L "bit" 2 375 "int8" `310 
f B "bit_test" 2 375 "int8(int16 var,int8 bit)" `308 
f N "bit_test" 2 376 ""
v L "var" 2 376 "int32" `312 
v L "bit" 2 376 "int8" `313 
f B "bit_test" 2 376 "int8(int32 var,int8 bit)" `311  "#use delay() Prototypes:"
f N "delay_cycles" 2 379 ""
v L "count" 2 379 "int8" `315 
f B "delay_cycles" 2 379 "void(int8 count)" `314 
f N "delay_ms" 2 380 ""
v L "time" 2 380 "int16" `317 
f B "delay_ms" 2 380 "void(int16 time)" `316 
f N "delay_us" 2 381 ""
v L "time" 2 381 "int16" `319 
f B "delay_us" 2 381 "void(int16 time)" `318  "#use rs232() Prototypes:"
f N "putchar" 2 384 ""
v L "cdata" 2 384 "int8" `321 
f B "putchar" 2 384 "void(int8 cdata)" `320 
f N "putchar" 2 385 ""
v L "cdata" 2 385 "int8" `323 
v L "stream" 2 385 "int8" `324 
f B "putchar" 2 385 "void(int8 cdata,int8 stream)" `322 
f N "puts" 2 386 ""
v L "string" 2 386 "*int8" `326 
f B "puts" 2 386 "void(*int8 string)" `325 
f N "puts" 2 387 ""
v L "string" 2 387 "*int8" `328 
v L "stream" 2 387 "int8" `329 
f B "puts" 2 387 "void(*int8 string,int8 stream)" `327 
f N "getch" 2 388 ""
f B "getch" 2 388 "int8()" `330 
f N "getch" 2 389 ""
v L "stream" 2 389 "int8" `332 
f B "getch" 2 389 "int8(int8 stream)" `331 
f N "gets" 2 390 ""
v L "string" 2 390 "*int8" `334 
f B "gets" 2 390 "void(*int8 string)" `333 
f N "gets" 2 391 ""
v L "string" 2 391 "*int8" `336 
v L "stream" 2 391 "int8" `337 
f B "gets" 2 391 "void(*int8 string,int8 stream)" `335 
f N "kbhit" 2 392 ""
f B "kbhit" 2 392 "int8()" `338 
f N "kbhit" 2 393 ""
v L "stream" 2 393 "int8" `340 
f B "kbhit" 2 393 "int8(int8 stream)" `339 
f N "printf" 2 394 ""
v L "string" 2 394 "*int8" `342 
f B "printf" 2 394 "void(*int8 string,*int8 _VA_LIST)" `341 
f N "fprintf" 2 395 ""
v L "stream" 2 395 "int8" `345 
v L "string" 2 395 "*int8" `346 
f B "fprintf" 2 395 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `344 
f N "putc_send" 2 396 ""
f B "putc_send" 2 396 "void()" `348 
f N "fputc_send" 2 397 ""
v L "stream" 2 397 "int8" `350 
f B "fputc_send" 2 397 "void(int8 stream)" `349 
f N "rcv_buffer_full" 2 398 ""
f B "rcv_buffer_full" 2 398 "int8()" `351 
f N "rcv_buffer_full" 2 399 ""
v L "stream" 2 399 "int8" `353 
f B "rcv_buffer_full" 2 399 "int8(int8 stream)" `352 
f N "rcv_buffer_bytes" 2 400 ""
f B "rcv_buffer_bytes" 2 400 "int16()" `354 
f N "rcv_buffer_bytes" 2 401 ""
v L "stream" 2 401 "int8" `356 
f B "rcv_buffer_bytes" 2 401 "int16(int8 stream)" `355 
f N "tx_buffer_full" 2 402 ""
f B "tx_buffer_full" 2 402 "int8()" `357 
f N "tx_buffer_full" 2 403 ""
v L "stream" 2 403 "int8" `359 
f B "tx_buffer_full" 2 403 "int8(int8 stream)" `358 
f N "tx_buffer_bytes" 2 404 ""
f B "tx_buffer_bytes" 2 404 "int16()" `360 
f N "tx_buffer_bytes" 2 405 ""
v L "stream" 2 405 "int8" `362 
f B "tx_buffer_bytes" 2 405 "int16(int8 stream)" `361  "#use i2c() Prototypes:"
f N "i2c_read" 2 408 ""
f B "i2c_read" 2 408 "int8()" `363 
f N "i2c_read" 2 409 ""
v L "stream" 2 409 "int8" `365 
f B "i2c_read" 2 409 "int8(int8 stream)" `364 
f N "i2c_read" 2 410 ""
v L "stream" 2 410 "int8" `367 
v L "ack" 2 410 "int8" `368 
f B "i2c_read" 2 410 "int8(int8 stream,int8 ack)" `366 
f N "i2c_write" 2 411 ""
v L "data" 2 411 "int8" `370 
f B "i2c_write" 2 411 "int8(int8 data)" `369 
f N "i2c_write" 2 412 ""
v L "stream" 2 412 "int8" `372 
v L "data" 2 412 "int8" `373 
f B "i2c_write" 2 412 "int8(int8 stream,int8 data)" `371 
f N "i2c_start" 2 413 ""
f B "i2c_start" 2 413 "void()" `374 
f N "i2c_start" 2 414 ""
v L "stream" 2 414 "int8" `376 
f B "i2c_start" 2 414 "void(int8 stream)" `375 
f N "i2c_start" 2 415 ""
v L "stream" 2 415 "int8" `378 
v L "restart" 2 415 "int8" `379 
f B "i2c_start" 2 415 "void(int8 stream,int8 restart)" `377 
f N "i2c_stop" 2 416 ""
f B "i2c_stop" 2 416 "void()" `380 
f N "i2c_stop" 2 417 ""
v L "stream" 2 417 "int8" `382 
f B "i2c_stop" 2 417 "void(int8 stream)" `381 
f N "i2c_isr_state" 2 418 ""
f B "i2c_isr_state" 2 418 "int8()" `383 
f N "i2c_slaveaddr" 2 419 ""
v L "addr" 2 419 "int8" `385 
f B "i2c_slaveaddr" 2 419 "void(int8 addr)" `384 
f N "i2c_slaveaddr" 2 420 ""
v L "stream" 2 420 "int8" `387 
v L "addr" 2 420 "int8" `388 
f B "i2c_slaveaddr" 2 420 "void(int8 stream,int8 addr)" `386 
f N "i2c_poll" 2 421 ""
f B "i2c_poll" 2 421 "int8()" `389 
f N "i2c_poll" 2 422 ""
v L "stream" 2 422 "int8" `391 
f B "i2c_poll" 2 422 "int8(int8 stream)" `390 
f N "i2c_init" 2 423 ""
v L "baud" 2 423 "int32" `393 
f B "i2c_init" 2 423 "void(int32 baud)" `392 
f N "i2c_init" 2 424 ""
v L "stream" 2 424 "int8" `395 
v L "baud" 2 424 "int32" `396 
f B "i2c_init" 2 424 "void(int8 stream,int32 baud)" `394  "#use spi() Prototypes:"
f N "spi_xfer" 2 427 ""
f B "spi_xfer" 2 427 "int8()" `397 
f N "spi_xfer" 2 428 ""
f B "spi_xfer" 2 428 "int16(int8 data)" `398 
f N "spi_xfer" 2 429 ""
f B "spi_xfer" 2 429 "int32(int8 data)" `398 
f N "spi_xfer" 2 430 ""
v L "data" 2 430 "int8" `399 
f B "spi_xfer" 2 430 "int8(int8 data)" `398 
f N "spi_xfer" 2 431 ""
v L "data" 2 431 "int16" `401 
f B "spi_xfer" 2 431 "int16(int16 data)" `400 
f N "spi_xfer" 2 432 ""
v L "data" 2 432 "int32" `403 
f B "spi_xfer" 2 432 "int32(int32 data)" `402 
f N "spi_xfer" 2 433 ""
v L "stream" 2 433 "int8" `405 
v L "data" 2 433 "int8" `406 
f B "spi_xfer" 2 433 "int8(int8 stream,int8 data)" `404 
f N "spi_xfer" 2 434 ""
v L "stream" 2 434 "int8" `408 
v L "data" 2 434 "int16" `409 
f B "spi_xfer" 2 434 "int16(int8 stream,int16 data)" `407 
f N "spi_xfer" 2 435 ""
v L "stream" 2 435 "int8" `411 
v L "data" 2 435 "int32" `412 
f B "spi_xfer" 2 435 "int32(int8 stream,int32 data)" `410 
f N "spi_xfer" 2 436 ""
v L "stream" 2 436 "int8" `414 
v L "data" 2 436 "int8" `415 
v L "bits" 2 436 "int8" `416 
f B "spi_xfer" 2 436 "int8(int8 stream,int8 data,int8 bits)" `413 
f N "spi_xfer" 2 437 ""
v L "stream" 2 437 "int8" `418 
v L "data" 2 437 "int16" `419 
v L "bits" 2 437 "int8" `420 
f B "spi_xfer" 2 437 "int16(int8 stream,int16 data,int8 bits)" `417 
f N "spi_xfer" 2 438 ""
v L "stream" 2 438 "int8" `422 
v L "data" 2 438 "int32" `423 
v L "bits" 2 438 "int8" `424 
f B "spi_xfer" 2 438 "int32(int8 stream,int32 data,int8 bits)" `421 
f N "spi_init" 2 439 ""
v L "baud" 2 439 "int32" `426 
f B "spi_init" 2 439 "void(int32 baud)" `425 
f N "spi_init" 2 440 ""
v L "stream" 2 440 "int8" `428 
v L "baud" 2 440 "int32" `429 
f B "spi_init" 2 440 "void(int8 stream,int32 baud)" `427 
f N "spi_speed" 2 441 ""
v L "baud" 2 441 "int32" `431 
f B "spi_speed" 2 441 "void(int32 baud)" `430 
f N "spi_speed" 2 442 ""
v L "stream" 2 442 "int8" `433 
v L "baud" 2 442 "int32" `434 
f B "spi_speed" 2 442 "void(int8 stream,int32 baud)" `432 
f N "spi_speed" 2 443 ""
v L "stream" 2 443 "int8" `436 
v L "baud" 2 443 "int32" `437 
v L "clock" 2 443 "int32" `438 
f B "spi_speed" 2 443 "void(int8 stream,int32 baud,int32 clock)" `435 
f N "spi_prewrite" 2 444 ""
v L "data" 2 444 "int8" `440 
f B "spi_prewrite" 2 444 "void(int8 data)" `439 
f N "spi_prewrite" 2 445 ""
v L "data" 2 445 "int16" `442 
f B "spi_prewrite" 2 445 "void(int16 data)" `441 
f N "spi_prewrite" 2 446 ""
v L "data" 2 446 "int32" `444 
f B "spi_prewrite" 2 446 "void(int32 data)" `443 
f N "spi_prewrite" 2 447 ""
v L "??65535" 2 447 "int8" `446 
v L "data" 2 447 "int8" `447 
f B "spi_prewrite" 2 447 "void(int8 ,int8 data)" `445 
f N "spi_prewrite" 2 448 ""
v L "??65535" 2 448 "int8" `449 
v L "data" 2 448 "int16" `450 
f B "spi_prewrite" 2 448 "void(int8 ,int16 data)" `448 
f N "spi_prewrite" 2 449 ""
v L "??65535" 2 449 "int8" `452 
v L "data" 2 449 "int32" `453 
f B "spi_prewrite" 2 449 "void(int8 ,int32 data)" `451 
f N "spi_xfer_in" 2 450 ""
f B "spi_xfer_in" 2 450 "int8()" `454 
f N "spi_xfer_in" 2 451 ""
f B "spi_xfer_in" 2 451 "int16(int8 bits)" `455 
f N "spi_xfer_in" 2 452 ""
f B "spi_xfer_in" 2 452 "int32(int8 bits)" `455 
f N "spi_xfer_in" 2 453 ""
v L "bits" 2 453 "int8" `456 
f B "spi_xfer_in" 2 453 "int8(int8 bits)" `455 
f N "spi_xfer_in" 2 454 ""
v L "bits" 2 454 "int8" `458 
f B "spi_xfer_in" 2 454 "int16(int8 bits,int8 bits)" `457 
f N "spi_xfer_in" 2 455 ""
v L "bits" 2 455 "int8" `458 
f B "spi_xfer_in" 2 455 "int32(int8 bits,int8 bits)" `457 
f N "spi_xfer_in" 2 456 ""
v L "stream" 2 456 "int8" `458 
v L "bits" 2 456 "int8" `459 
f B "spi_xfer_in" 2 456 "int8(int8 stream,int8 bits)" `457 
f N "spi_xfer_in" 2 457 ""
v L "stream" 2 457 "int8" `458 
v L "bits" 2 457 "int8" `462 
f B "spi_xfer_in" 2 457 "int16(int8 stream,int8 bits,int8 task)" `460 
f N "spi_xfer_in" 2 458 ""
v L "stream" 2 458 "int8" `458 
v L "bits" 2 458 "int8" `462 
f B "spi_xfer_in" 2 458 "int32(int8 stream,int8 bits,int8 task)" `460  "#use rtos() Prototypes:"
f N "rtos_run" 2 461 ""
f B "rtos_run" 2 461 "void(int8 stream,int8 bits,int8 task)" `460 
f N "rtos_yield" 2 462 ""
f B "rtos_yield" 2 462 "void(int8 bits,int8 task)" `461 
f N "rtos_enable" 2 463 ""
v L "task" 2 463 "int8" `463 
f B "rtos_enable" 2 463 "void(int8 task)" `462 
f N "rtos_disable" 2 464 ""
v L "task" 2 464 "int8" `465 
f B "rtos_disable" 2 464 "void(int8 task)" `464 
f N "rtos_terminate" 2 465 ""
f B "rtos_terminate" 2 465 "void()" `466 
f N "rtos_await" 2 466 ""
v L "flag" 2 466 "int8" `468 
f B "rtos_await" 2 466 "void(int8 flag)" `467 
f N "rtos_wait" 2 467 ""
v L "sem" 2 467 "int8" `470 
f B "rtos_wait" 2 467 "void(int8 sem)" `469 
f N "rtos_signal" 2 468 ""
v L "sem" 2 468 "int8" `472 
f B "rtos_signal" 2 468 "void(int8 sem)" `471 
f N "rtos_msg_send" 2 469 ""
v L "task" 2 469 "int8" `474 
v L "msg" 2 469 "int8" `475 
f B "rtos_msg_send" 2 469 "void(int8 task,int8 msg)" `473 
f N "rtos_msg_read" 2 470 ""
f B "rtos_msg_read" 2 470 "int8()" `476 
f N "rtos_msg_poll" 2 471 ""
f B "rtos_msg_poll" 2 471 "int8()" `477 
f N "rtos_overrun" 2 472 ""
v L "task" 2 472 "int8" `479 
f B "rtos_overrun" 2 472 "int8(int8 task)" `478 
f N "rtos_stats" 2 473 ""
v L "task" 2 473 "int8" `481 
v L "stat" 2 473 "*int8" `482 
f B "rtos_stats" 2 473 "void(int8 task,*int8 stat)" `480  "#use timer() Prototypes:"
f N "get_ticks" 2 476 ""
f B "get_ticks" 2 476 "int8()" `483 
f N "get_ticks" 2 477 ""
f B "get_ticks" 2 477 "int16(int8 stream)" `484 
f N "get_ticks" 2 478 ""
f B "get_ticks" 2 478 "int32(int8 stream)" `484 
f N "get_ticks" 2 479 ""
v L "stream" 2 479 "int8" `485 
f B "get_ticks" 2 479 "int8(int8 stream)" `484 
f N "get_ticks" 2 480 ""
v L "stream" 2 480 "int8" `487 
f B "get_ticks" 2 480 "int16(int8 stream)" `486 
f N "get_ticks" 2 481 ""
v L "stream" 2 481 "int8" `487 
f B "get_ticks" 2 481 "int32(int8 stream)" `486 
f N "set_ticks" 2 482 ""
v L "value" 2 482 "int8" `487 
f B "set_ticks" 2 482 "void(int8 value)" `486 
f N "set_ticks" 2 483 ""
v L "value" 2 483 "int16" `489 
f B "set_ticks" 2 483 "void(int16 value)" `488 
f N "set_ticks" 2 484 ""
v L "value" 2 484 "int32" `491 
f B "set_ticks" 2 484 "void(int32 value)" `490 
f N "set_ticks" 2 485 ""
v L "stream" 2 485 "int8" `493 
v L "value" 2 485 "int8" `494 
f B "set_ticks" 2 485 "void(int8 stream,int8 value)" `492 
f N "set_ticks" 2 486 ""
v L "stream" 2 486 "int8" `496 
v L "value" 2 486 "int16" `497 
f B "set_ticks" 2 486 "void(int8 stream,int16 value)" `495 
f N "set_ticks" 2 487 ""
v L "stream" 2 487 "int8" `499 
v L "value" 2 487 "int32" `500 
f B "set_ticks" 2 487 "void(int8 stream,int32 value)" `498  "#use pwm() Prototypes:"
f N "pwm_on" 2 490 ""
f B "pwm_on" 2 490 "void()" `501 
f N "pwm_on" 2 491 ""
v L "stream" 2 491 "int8" `503 
f B "pwm_on" 2 491 "void(int8 stream)" `502 
f N "pwm_off" 2 492 ""
f B "pwm_off" 2 492 "void()" `504 
f N "pwm_off" 2 493 ""
v L "stream" 2 493 "int8" `506 
f B "pwm_off" 2 493 "void(int8 stream)" `505 
f N "pwm_set_duty" 2 494 ""
v L "duty" 2 494 "int16" `508 
f B "pwm_set_duty" 2 494 "void(int16 duty)" `507 
f N "pwm_set_duty" 2 495 ""
v L "stream" 2 495 "int8" `510 
v L "duty" 2 495 "int16" `511 
f B "pwm_set_duty" 2 495 "void(int8 stream,int16 duty)" `509 
f N "pwm_set_duty_percent" 2 496 ""
v L "percent" 2 496 "int16" `513 
f B "pwm_set_duty_percent" 2 496 "void(int16 percent)" `512 
f N "pwm_set_duty_percent" 2 497 ""
v L "stream" 2 497 "int8" `515 
v L "percent" 2 497 "int16" `516 
f B "pwm_set_duty_percent" 2 497 "void(int8 stream,int16 percent)" `514 
f N "pwm_set_frequency" 2 498 ""
v L "frequency" 2 498 "int32" `518 
f B "pwm_set_frequency" 2 498 "void(int32 frequency)" `517 
f N "pwm_set_frequency" 2 499 ""
v L "stream" 2 499 "int8" `520 
v L "frequency" 2 499 "int32" `521 
f B "pwm_set_frequency" 2 499 "void(int8 stream,int32 frequency)" `519  "#use capture() Prototypes:"
f N "get_capture_time" 2 502 ""
f B "get_capture_time" 2 502 "int16()" `522 
f N "get_capture_time" 2 503 ""
v L "stream" 2 503 "int8" `524 
f B "get_capture_time" 2 503 "int16(int8 stream)" `523 
f N "get_capture_event" 2 504 ""
f B "get_capture_event" 2 504 "int8()" `525 
f N "get_capture_event" 2 505 ""
v L "stream" 2 505 "int8" `527 
f B "get_capture_event" 2 505 "int8(int8 stream)" `526  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
f N "goto_address" 2 518 ""
v L "address" 2 518 "int16" `529 
f B "goto_address" 2 518 "void(int16 address)" `528 
f N "label_address" 2 519 ""
v L "label" 2 519 "int16" `531 
f B "label_address" 2 519 "int16(int16 label)" `530  "INT"
c L "label_address" 2 3 4 "FUNCTION"
f N "enable_interrupts" 2 526 ""
v L "interrupt" 2 526 "int32" `533 
f B "enable_interrupts" 2 526 "void(int32 interrupt)" `532 
f N "disable_interrupts" 2 527 ""
v L "interrupt" 2 527 "int32" `535 
f B "disable_interrupts" 2 527 "void(int32 interrupt)" `534 
f N "clear_interrupt" 2 528 ""
v L "interrupt" 2 528 "int32" `537 
f B "clear_interrupt" 2 528 "void(int32 interrupt)" `536 
f N "interrupt_active" 2 529 ""
v L "interrupt" 2 529 "int32" `539 
f B "interrupt_active" 2 529 "int8(int32 interrupt)" `538 
f N "interrupt_enabled" 2 530 ""
v L "interrupt" 2 530 "int32" `541 
f B "interrupt_enabled" 2 530 "int8(int32 interrupt)" `540 
f N "ext_int_edge" 2 531 ""
v L "source" 2 531 "int8" `543 
v L "edge" 2 531 "int8" `544 
f B "ext_int_edge" 2 531 "void(int8 source,int8 edge)" `542 
f N "jump_to_isr" 2 532 ""
v L "address" 2 532 "int16" `546 
f B "jump_to_isr" 2 532 "void(int16 address)" `545  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 534 "0x40"
d G "H_TO_L" 2 535 "0"
d G "GLOBAL" 2 537 "0x0BC0"
d G "PERIPH" 2 538 "0x0B40"
d G "INT_RTCC" 2 539 "0x000B20"
d G "INT_RB" 2 540 "0x00FF0B08"
d G "INT_EXT_L2H" 2 541 "0x50000B10"
d G "INT_EXT_H2L" 2 542 "0x60000B10"
d G "INT_EXT" 2 543 "0x000B10"
d G "INT_AD" 2 544 "0x008C40"
d G "INT_TBE" 2 545 "0x008C10"
d G "INT_RDA" 2 546 "0x008C20"
d G "INT_TIMER1" 2 547 "0x008C01"
d G "INT_TIMER2" 2 548 "0x008C02"
d G "INT_CCP1" 2 549 "0x008C04"
d G "INT_CCP2" 2 550 "0x008D01"
d G "INT_SSP" 2 551 "0x008C08"
d G "INT_TIMER0" 2 552 "0x000B20"
C L "jump_to_isr" 1 8 1 "FUNCTION"
D G "EEPROM_SDA" 3 40 "PIN_C4"
D G "EEPROM_SCL" 3 41 "PIN_C3"
D G "hi" 3 46 "(x)  (*((int8 *)&x+1))"
D G "EEPROM_ADDRESS" 3 50 "long int"
D G "EEPROM_SIZE" 3 51 "8192"
F N "init_ext_eeprom" 3 53 ""
F G "init_ext_eeprom" 3 53 "void()" `560 
F N "ext_eeprom_ready" 3 58 ""
F G "ext_eeprom_ready" 3 58 "int8()" `561 
V L "ack" 3 59 "int1" `562 
C L "ext_eeprom_ready" 3 2 1 "FUNCTION"
C L "ext_eeprom_ready" 3 2 1 "FUNCTION"
F N "write_ext_eeprom" 3 66 ""
V L "address" 3 66 "int16" `564 
V L "data" 3 66 "int8" `565 
F G "write_ext_eeprom" 3 66 "void(int16 address,int8 data)" `563 
F N "read_ext_eeprom" 3 76 ""
V L "address" 3 76 "int16" `567 
F G "read_ext_eeprom" 3 76 "int8(int16 address)" `566 
V L "data" 3 77 "int8" `568 
D G "__LCD_C__" 4 76 ""
T G "LCD_PIN_MAP" 4 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `575  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 4 109 "(x) lcdlat.enable=x"
D G "lcd_enable_tris" 4 110 "()   lcdtris.enable=0"
D G "lcd_output_rs" 4 117 "(x) lcdlat.rs=x"
D G "lcd_rs_tris" 4 118 "()   lcdtris.rs=0"
D G "lcd_output_rw" 4 125 "(x) lcdlat.rw=x"
D G "lcd_rw_tris" 4 126 "()   lcdtris.rw=0"
D G "LCD_DATA_PORT" 4 151 "getenv("SFR:PORTB")" "portb"
V G "lcd" 4 161 "LCD_PIN_MAP" `576 
V G "lcdlat" 4 161 "LCD_PIN_MAP" `577 
V G "lcdtris" 4 161 "LCD_PIN_MAP" `578 
D G "LCD_TYPE" 4 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 4 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 4 187 "20"
F N "lcd_read_nibble" 4 190 ""
f G "lcd_read_nibble" 4 190 "int8()" `579 
F N "lcd_read_byte" 4 192 ""
F G "lcd_read_byte" 4 193 "int8()" `580 
V L "low" 4 194 "int8" `581 
V L "high" 4 194 "int8" `582 
F N "lcd_read_nibble" 4 239 ""
F G "lcd_read_nibble" 4 240 "int8()" `579 
F N "lcd_send_nibble" 4 256 ""
V L "n" 4 256 "int8" `584 
F G "lcd_send_nibble" 4 257 "void(int8 n)" `583 
F N "lcd_send_byte" 4 274 ""
V L "address" 4 274 "int8" `586 
V L "n" 4 274 "int8" `587 
F G "lcd_send_byte" 4 275 "void(int8 address,int8 n)" `585 
F N "lcd_init" 4 299 ""
F G "lcd_init" 4 300 "void()" `588 
V L "i" 4 301 "int8" `589 
V L "LCD_INIT_STRING" 4 302 "int8[4]" `590 
C L "lcd_init" 4 2 2 "FUNCTION"
F N "lcd_gotoxy" 4 345 ""
V L "x" 4 345 "int8" `592 
V L "y" 4 345 "int8" `593 
F G "lcd_gotoxy" 4 346 "void(int8 x,int8 y)" `591 
V L "address" 4 347 "int8" `594 
F N "lcd_putc" 4 363 ""
V L "c" 4 363 "int8" `596 
F G "lcd_putc" 4 364 "void(int8 c)" `595 
F N "lcd_getc" 4 406 ""
V L "x" 4 406 "int8" `598 
V L "y" 4 406 "int8" `599 
F G "lcd_getc" 4 407 "int8(int8 x,int8 y)" `597 
V L "value" 4 408 "int8" `600 
C L "lcd_getc" 4 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 4 2 5 "FUNCTION"
F N "lcd_set_cgram_char" 4 424 ""
V L "which" 4 424 "int8" `602 
V L "ptr" 4 424 "*int8" `603 
F G "lcd_set_cgram_char" 4 425 "void(int8 which,*int8 ptr)" `601 
V L "i" 4 426 "int8" `604 
C L "lcd_set_cgram_char" 4 2 1 "FUNCTION"
F N "lcd_cursor_on" 4 443 ""
V L "on" 4 443 "int8" `606 
F G "lcd_cursor_on" 4 444 "void(int8 on)" `605 
C L "lcd_cursor_on" 4 2 1 "FUNCTION"
C L "lcd_cursor_on" 4 2 1 "FUNCTION"
D G "_STDLIB" 5 12 ""
D G "RAND_MAX" 5 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 5 27 "0"
T G "div_t" 5 33 "{sint8 quot,sint8 rem}" `610 
T G "ldiv_t" 5 38 "{sint16 quot,sint16 rem}" `614  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 16 "unsigned int8"
D G "size_t" 6 22 "unsigned int8"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 5 43 2 "FUNCTION"
C L "atoi" 5 46 1 "*"
C L "atoi" 5 46 1 "*"
F N "atoi" 5 50 ""
V L "s" 5 50 "*int8" `616 
f G "atoi" 5 50 "sint8(*int8 s)" `615  "Syntax: signed int32  atoi32(char * s)"
F N "atoi32" 5 58 ""
V L "s" 5 58 "*int8" `618 
f G "atoi32" 5 58 "sint32(*int8 s)" `617  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 5 46 2 "FUNCTION"
F N "itoa" 5 79 ""
V L "num" 5 79 "sint32" `620 
V L "base" 5 79 "int8" `621 
V L "s" 5 79 "*int8" `622 
f G "itoa" 5 79 "*int8(sint32 num,int8 base,*int8 s)" `619  "Standard template: signed int16  atol(char * s)"
C L "itoa" 5 81 1 "*"
C L "itoa" 5 81 1 "*"
F N "atol" 5 85 ""
V L "s" 5 85 "*int8" `624 
f G "atol" 5 85 "sint16(*int8 s)" `623  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
F N "strtol" 5 93 ""
V L "s" 5 93 "*int8" `626 
V L "endptr" 5 93 "*int8" `627 
V L "base" 5 93 "sint8" `628 
f G "strtol" 5 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `625  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
F N "strtoul" 5 101 ""
V L "s" 5 101 "*int8" `630 
V L "endptr" 5 101 "*int8" `631 
V L "base" 5 101 "sint8" `632 
f G "strtoul" 5 101 "int16(*int8 s,*int8 endptr,sint8 base)" `629  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 5 95 2 "FUNCTION"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
F N "strtof" 5 110 ""
V L "s" 5 110 "*int8" `634 
V L "endptr" 5 110 "*int8" `635 
f G "strtof" 5 110 "float(*int8 s,*int8 endptr)" `633  "provided for compatibility"
D G "strtof48" 5 116 "(s,e) strtof(s, e)"
D G "strtod" 5 117 "(s,e) strtof(s, e)"
C L "strtof" 5 103 1 "FUNCTION"
C L "strtof" 5 120 1 "*"
D G "atof" 5 124 "(s)   strtof(s, 0)"
C L "strtof" 5 120 1 "FUNCTION"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
F N "atoe" 5 149 ""
V L "s" 5 149 "*int8" `637 
f G "atoe" 5 149 "float(*int8 s)" `636  "Pseudo-random sequence generation functions"
C L "atoe" 5 143 1 "FUNCTION"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
F N "rand" 5 169 ""
f G "rand" 5 169 "int16()" `638  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
F N "srand" 5 191 ""
V L "seed" 5 191 "int32" `640 
f G "srand" 5 191 "void(int32 seed)" `639  "Memory management functions"
C L "srand" 5 171 3 "FUNCTION"
F N "system" 5 205 ""
V L "string" 5 205 "*int8" `642 
f G "system" 5 205 "sint8(*int8 string)" `641  "Searching and sorting utilities"
C L "system" 5 171 1 "FUNCTION"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 4 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
D G "labs" 5 249 "abs"
F N "div" 5 251 ""
V L "numer" 5 251 "sint8" `644 
V L "denom" 5 251 "sint8" `645 
f G "div" 5 251 "div_t(sint8 numer,sint8 denom)" `643 
F N "ldiv" 5 252 ""
V L "numer" 5 252 "sint16" `647 
V L "denom" 5 252 "sint16" `648 
f G "ldiv" 5 252 "ldiv_t(sint16 numer,sint16 denom)" `646  "Multibyte character functions"
C L "ldiv" 5 229 4 "FUNCTION"
C L "ldiv" 6 2 7 "FUNCTION"
D G "_STRING" 7 12 ""
C L "ldiv" 6 2 7 "FUNCTION"
D G "_CTYPE" 8 12 ""
D G "islower" 8 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 8 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 8 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 8 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 8 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 8 19 "(x)  ((x)==' ')"
D G "isxdigit" 8 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 8 21 "(x)  ((x)<' ')"
D G "isprint" 8 22 "(x)  ((x)>=' ')"
D G "isgraph" 8 23 "(x)  ((x)>' ')"
D G "ispunct" 8 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 7 19 10 "FUNCTION"
F N "memmove" 7 34 ""
V L "s1" 7 34 "*int8" `650 
V L "s2" 7 34 "*int8" `651 
V L "n" 7 34 "int8" `652 
F G "memmove" 7 35 "*int8(*int8 s1,*int8 s2,int8 n)" `649 
V L "sc1" 7 36 "*int8" `653 
V L "sc2" 7 37 "*int8" `654 
D G "strcopy" 7 54 "strcpy"
F N "strncpy" 7 61 ""
V L "s1" 7 61 "*int8" `656 
V L "s2" 7 61 "*int8" `657 
V L "n" 7 61 "int8" `658 
F G "strncpy" 7 62 "*int8(*int8 s1,*int8 s2,int8 n)" `655 
V L "s" 7 63 "*int8" `659 
F N "strcat" 7 78 ""
V L "s1" 7 78 "*int8" `661 
V L "s2" 7 78 "*int8" `662 
F G "strcat" 7 79 "*int8(*int8 s1,*int8 s2)" `660 
V L "s" 7 80 "*int8" `663 
F N "strncat" 7 96 ""
V L "s1" 7 96 "*int8" `665 
V L "s2" 7 96 "*int8" `666 
V L "n" 7 96 "int8" `667 
F G "strncat" 7 97 "*int8(*int8 s1,*int8 s2,int8 n)" `664 
V L "s" 7 98 "*int8" `668 
C L "memcmp" 7 19 3 "FUNCTION"
F N "memcmp" 7 120 ""
V L "s1" 7 120 "*int8" `670 
V L "s2" 7 120 "*int8" `671 
V L "n" 7 120 "int8" `672 
F G "memcmp" 7 121 "sint8(*int8 s1,*int8 s2,int8 n)" `669 
V L "su1" 7 122 "*int8" `673 
V L "su2" 7 122 "*int8" `674 
C L "strcmp" 7 19 2 "FUNCTION"
F N "strcmp" 7 134 ""
V L "s1" 7 134 "*int8" `676 
V L "s2" 7 134 "*int8" `677 
F G "strcmp" 7 135 "sint8(*int8 s1,*int8 s2)" `675 
C L "strcoll" 7 19 2 "FUNCTION"
F N "strcoll" 7 144 ""
V L "s1" 7 144 "*int8" `679 
V L "s2" 7 144 "*int8" `680 
F G "strcoll" 7 145 "sint8(*int8 s1,*int8 s2)" `678 
C L "strncmp" 7 19 4 "FUNCTION"
F N "strncmp" 7 157 ""
V L "s1" 7 157 "*int8" `682 
V L "s2" 7 157 "*int8" `683 
V L "n" 7 157 "int8" `684 
F G "strncmp" 7 158 "sint8(*int8 s1,*int8 s2,int8 n)" `681 
C L "strxfrm" 7 19 4 "FUNCTION"
F N "strxfrm" 7 170 ""
V L "s1" 7 170 "*int8" `686 
V L "s2" 7 170 "*int8" `687 
V L "n" 7 170 "int8" `688 
F G "strxfrm" 7 171 "int8(*int8 s1,*int8 s2,int8 n)" `685 
V L "c" 7 172 "int8" `689 
V L "n1" 7 173 "int8" `690 
C L "strxfrm" 7 19 1 "FUNCTION"
F N "memchr" 7 201 ""
V L "s" 7 201 "*int8" `692 
V L "c" 7 201 "int8" `693 
V L "n" 7 201 "int8" `694 
F G "memchr" 7 202 "*int8(*int8 s,int8 c,int8 n)" `691 
V L "uc" 7 203 "int8" `695 
V L "su" 7 204 "*int8" `696 
F N "strchr" 7 215 ""
V L "s" 7 215 "*int8" `698 
V L "c" 7 215 "int8" `699 
F G "strchr" 7 216 "*int8(*int8 s,int8 c)" `697 
C L "strcspn" 7 19 4 "FUNCTION"
F N "strcspn" 7 227 ""
V L "s1" 7 227 "*int8" `701 
V L "s2" 7 227 "*int8" `702 
F G "strcspn" 7 228 "int8(*int8 s1,*int8 s2)" `700 
V L "sc1" 7 229 "*int8" `703 
V L "sc2" 7 229 "*int8" `704 
F N "strpbrk" 7 242 ""
V L "s1" 7 242 "*int8" `706 
V L "s2" 7 242 "*int8" `707 
F G "strpbrk" 7 243 "*int8(*int8 s1,*int8 s2)" `705 
V L "sc1" 7 244 "*int8" `708 
V L "sc2" 7 244 "*int8" `709 
F N "strrchr" 7 257 ""
V L "s" 7 257 "*int8" `711 
V L "c" 7 257 "int8" `712 
F G "strrchr" 7 258 "*int8(*int8 s,int8 c)" `710 
V L "p" 7 259 "*int8" `713 
C L "strspn" 7 19 2 "FUNCTION"
F N "strspn" 7 272 ""
V L "s1" 7 272 "*int8" `715 
V L "s2" 7 272 "*int8" `716 
F G "strspn" 7 273 "int8(*int8 s1,*int8 s2)" `714 
V L "sc1" 7 274 "*int8" `717 
V L "sc2" 7 274 "*int8" `718 
F N "strstr" 7 291 ""
V L "s1" 7 291 "*int8" `720 
V L "s2" 7 291 "*int8" `721 
F G "strstr" 7 292 "*int8(*int8 s1,*int8 s2)" `719 
V L "s" 7 293 "*int8" `722 
V L "t" 7 293 "*int8" `723 
C L "strlen" 7 19 2 "FUNCTION"
F N "strlen" 7 318 ""
V L "s" 7 318 "*int8" `725 
F G "strlen" 7 319 "int8(*int8 s)" `724 
V L "sc" 7 320 "*int8" `726 
F N "strtok" 7 341 ""
V L "s1" 7 341 "*int8" `728 
V L "s2" 7 341 "*int8" `729 
F G "strtok" 7 342 "*int8(*int8 s1,*int8 s2)" `727 
V L "beg" 7 343 "*int8" `730 
V L "end" 7 343 "*int8" `731 
V L "save" 7 344 "*int8" `732 
C L "stricmp" 7 19 6 "FUNCTION"
F N "stricmp" 7 392 ""
V L "s1" 7 392 "*int8" `734 
V L "s2" 7 392 "*int8" `735 
F G "stricmp" 7 393 "sint8(*int8 s1,*int8 s2)" `733 
F N "strlwr" 7 406 ""
V L "s" 7 406 "*int8" `739 
F G "strlwr" 7 407 "*int8(*int8 s)" `738 
V L "p" 7 408 "*int8" `740 
F N "strupr" 7 420 ""
V L "s" 7 420 "*int8" `742 
F G "strupr" 7 421 "*int8(*int8 s)" `741 
V L "p" 7 422 "*int8" `743 
F N "div" 5 274 ""
V L "numer" 5 274 "sint8" `644 
V L "denom" 5 274 "sint8" `746 
F G "div" 5 275 "div_t(sint8 numer,sint8 denom)" `643 
V L "val" 5 276 "div_t" `744 
F N "ldiv" 5 282 ""
V L "numer" 5 282 "sint16" `647 
V L "denom" 5 282 "sint16" `753 
F G "ldiv" 5 283 "ldiv_t(sint16 numer,sint16 denom)" `646 
V L "val" 5 284 "ldiv_t" `751 
F N "atoe" 5 361 ""
V L "s" 5 361 "*int8" `759 
F G "atoe" 5 362 "float(*int8 s)" `636 
V L "pow10" 5 363 "float" `758 
V L "result" 5 364 "float" `759 
V L "sign" 5 365 "int8" `760 
V L "expsign" 5 366 "int8" `761 
V L "c" 5 367 "int8" `762 
V L "ptr" 5 368 "int8" `763 
V L "i" 5 369 "int8" `764 
V L "exp" 5 370 "float" `765 
V L "expcnt" 5 371 "int8" `766 
C L "atoe" 5 397 1 "FUNCTION"
F N "atoi" 5 429 ""
V L "s" 5 429 "*int8" `779 
F G "atoi" 5 430 "sint8(*int8 s)" `615 
V L "result" 5 431 "sint8" `778 
V L "sign" 5 432 "int8" `779 
V L "base" 5 432 "int8" `780 
V L "index" 5 432 "int8" `781 
V L "c" 5 433 "int8" `782 
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
F N "atol" 5 498 ""
V L "s" 5 498 "*int8" `784 
F G "atol" 5 499 "sint16(*int8 s)" `623 
V L "result" 5 500 "sint16" `783 
V L "sign" 5 501 "int8" `784 
V L "base" 5 501 "int8" `785 
V L "index" 5 501 "int8" `786 
V L "c" 5 502 "int8" `787 
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "mult_with10" 5 397 1 "FUNCTION"
F N "mult_with10" 5 565 ""
V L "num" 5 565 "int32" `789 
F G "mult_with10" 5 566 "sint32(int32 num)" `788 
F N "atoi32" 5 571 ""
V L "s" 5 571 "*int8" `791 
F G "atoi32" 5 572 "sint32(*int8 s)" `617 
V L "result" 5 573 "sint32" `790 
V L "sign" 5 574 "int8" `791 
V L "base" 5 574 "int8" `792 
V L "index" 5 574 "int8" `793 
V L "c" 5 575 "int8" `794 
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
F N "itoa" 5 770 ""
V L "num" 5 770 "sint32" `620 
V L "base" 5 770 "int8" `621 
V L "s" 5 770 "*int8" `798 
F G "itoa" 5 771 "*int8(sint32 num,int8 base,*int8 s)" `619 
V L "temp" 5 772 "int32" `795 
V L "i" 5 773 "int8" `796 
V L "sign" 5 773 "int8" `797 
V L "cnt" 5 773 "int8" `798 
V L "c" 5 774 "int8" `799 
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
F N "strtof" 5 885 ""
V L "s" 5 885 "*int8" `634 
V L "endptr" 5 885 "*int8" `808 
F G "strtof" 5 886 "float(*int8 s,*int8 endptr)" `633 
V L "pow10" 5 887 "float" `806 
V L "result" 5 888 "float" `807 
V L "skip" 5 889 "int1" `808 
V L "sign" 5 889 "int1" `809 
V L "point" 5 889 "int1" `810 
V L "c" 5 890 "int8" `811 
V L "ptr" 5 891 "int8" `812 
F N "strtoul" 5 1103 ""
V L "s" 5 1103 "*int8" `630 
V L "endptr" 5 1103 "*int8" `631 
V L "base" 5 1103 "sint8" `817 
F G "strtoul" 5 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `629 
V L "sc" 5 1105 "*int8" `814 
V L "s1" 5 1105 "*int8" `815 
V L "sd" 5 1105 "*int8" `816 
V L "x" 5 1106 "int16" `817 
V L "sign" 5 1107 "int8" `818 
V L "digits" 5 1108 "int8[1]" `819 
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
F N "strtol" 5 1165 ""
V L "s" 5 1165 "*int8" `626 
V L "endptr" 5 1165 "*int8" `627 
V L "base" 5 1165 "sint8" `824 
F G "strtol" 5 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `625 
V L "sc" 5 1167 "*int8" `821 
V L "s1" 5 1167 "*int8" `822 
V L "sd" 5 1167 "*int8" `823 
V L "x" 5 1168 "sint16" `824 
V L "sign" 5 1169 "int8" `825 
V L "digits" 5 1170 "int8[1]" `826 
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
F N "system" 5 1228 ""
V L "string" 5 1228 "*int8" `829 
F G "system" 5 1229 "sint8(*int8 string)" `641 
F N "mblen" 5 1233 ""
V L "s" 5 1233 "*int8" `829 
V L "n" 5 1233 "int8" `830 
F G "mblen" 5 1234 "int8(*int8 s,int8 n)" `828 
F N "mbtowc" 5 1238 ""
V L "pwc" 5 1238 "*int8" `832 
V L "s" 5 1238 "*int8" `833 
V L "n" 5 1238 "int8" `834 
F G "mbtowc" 5 1239 "int8(*int8 pwc,*int8 s,int8 n)" `831 
F N "wctomb" 5 1244 ""
V L "s" 5 1244 "*int8" `836 
V L "wchar" 5 1244 "int8" `837 
F G "wctomb" 5 1245 "int8(*int8 s,int8 wchar)" `835 
F N "mbstowcs" 5 1250 ""
V L "pwcs" 5 1250 "*int8" `839 
V L "s" 5 1250 "*int8" `840 
V L "n" 5 1250 "int8" `841 
F G "mbstowcs" 5 1251 "int8(*int8 pwcs,*int8 s,int8 n)" `838 
F N "wcstombs" 5 1256 ""
V L "s" 5 1256 "*int8" `843 
V L "pwcs" 5 1256 "*int8" `844 
V L "n" 5 1256 "int8" `845 
F G "wcstombs" 5 1257 "int8(*int8 s,*int8 pwcs,int8 n)" `842 
V G "_Randseed" 5 1266 "int32" `846 
F N "rand" 5 1268 ""
F G "rand" 5 1269 "int16()" `638 
F N "srand" 5 1274 ""
V L "seed" 5 1274 "int32" `851 
F G "srand" 5 1275 "void(int32 seed)" `639 
F N "*_Cmpfun" 5 1284 ""
V L "p1" 5 1284 "*int8" `851 
V L "p2" 5 1284 "*int8" `852 
T G "*_Cmpfun" 5 1284 "sint8(*int8 p1,*int8 p2)" `850 
F N "qsort" 5 1291 ""
V L "qdata" 5 1291 "*int8" `855 
V L "qitems" 5 1291 "int8" `856 
V L "qsize" 5 1291 "int8" `857 
V L "cmp" 5 1291 "_Cmpfun" `858 
F G "qsort" 5 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `854 
V L "m" 5 1292 "int8" `859 
V L "j" 5 1292 "int8" `860 
V L "i" 5 1292 "int8" `861 
V L "l" 5 1292 "int8" `862 
V L "done" 5 1293 "int1" `863 
V L "t" 5 1294 "int8[16]" `864 
F N "bsearch" 5 1319 ""
V L "key" 5 1319 "*int8" `867 
V L "base" 5 1319 "*int8" `868 
V L "num" 5 1319 "int8" `869 
V L "width" 5 1319 "int8" `870 
V L "cmp" 5 1319 "_Cmpfun" `871 
F G "bsearch" 5 1320 "*int8(*int8 key,*int8 base,int8 num,int8 width,_Cmpfun cmp)" `866 
V L "p" 5 1321 "*int8" `872 
V L "q" 5 1321 "*int8" `873 
V L "n" 5 1322 "int8" `874 
V L "pivot" 5 1323 "int8" `875 
V L "val" 5 1324 "sint8" `876 
C L "bsearch" 5 397 1 "FUNCTION"
V G "NewState" 0 6 "int8" `877 
V G "OldState" 0 6 "int8" `878 
V G "OldVol" 0 6 "int8" `879 
V G "upState" 0 6 "int8" `880 
V G "downState" 0 6 "int8" `881 
V G "OldBtnW" 0 6 "int8" `882 
V G "OldBtnR" 0 6 "int8" `883 
V G "Vol" 0 7 "int8" `884 
V G "duty" 0 8 "int8[3]" `885 
F N "EncoderScan" 0 10 ""
f G "EncoderScan" 0 10 "void()" `886 
F N "LcdOut" 0 11 ""
f G "LcdOut" 0 11 "void()" `887 
F N "TIMER2_isr" 0 15 ""
F G "TIMER2_isr" 0 16 "void()" `888 
D G "LCD_ENABLE_PIN" 0 21 "PIN_B0"
D G "LCD_RS_PIN" 0 22 "PIN_B1"
D G "LCD_RW_PIN" 0 23 "PIN_B2"
D G "LCD_DATA4" 0 24 "PIN_B4"
D G "LCD_DATA5" 0 25 "PIN_B5"
D G "LCD_DATA6" 0 26 "PIN_B6"
D G "LCD_DATA7" 0 27 "PIN_B7"
F N "EncoderScan" 0 30 ""
F G "EncoderScan" 0 31 "void()" `886 
F N "LcdOut" 0 76 ""
F G "LcdOut" 0 77 "void()" `887 
F N "MAIN" 0 89 ""
F G "MAIN" 0 90 "void()" `895 
C L "MAIN" 0 91 1 "FUNCTION"
C L "MAIN" 0 91 1 "FUNCTION"
C L "MAIN" 0 91 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
