D G "__PCM__" 0 154 ""5.019""
D G "__DEVICE__" 0 154 "73"
D G "__DATE__" 0 154 ""29-џэт-16""
D G "__TIME__" 0 154 ""21:34:03"" "Standard Header file for the PIC16C73B device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 35 "int8" `53 
f B "set_tris_a" 2 35 "void(int8 value)" `52 
v L "value" 2 36 "int8" `55 
f B "set_tris_b" 2 36 "void(int8 value)" `54 
v L "value" 2 37 "int8" `57 
f B "set_tris_c" 2 37 "void(int8 value)" `56 
f B "get_tris_a" 2 38 "int8()" `58 
f B "get_tris_b" 2 39 "int8()" `59 
f B "get_tris_c" 2 40 "int8()" `60 
v L "value" 2 41 "int8" `62 
f B "output_a" 2 41 "void(int8 value)" `61 
v L "value" 2 42 "int8" `64 
f B "output_b" 2 42 "void(int8 value)" `63 
v L "value" 2 43 "int8" `66 
f B "output_c" 2 43 "void(int8 value)" `65 
f B "input_a" 2 44 "int8()" `67 
f B "input_b" 2 45 "int8()" `68 
f B "input_c" 2 46 "int8()" `69 
f B "input_change_a" 2 47 "int8()" `70 
f B "input_change_b" 2 48 "int8()" `71 
f B "input_change_c" 2 49 "int8()" `72 
v L "pin" 2 50 "int16" `74 
f B "input" 2 50 "int8(int16 pin)" `73 
v L "pin" 2 51 "int16" `76 
f B "input_state" 2 51 "int8(int16 pin)" `75 
v L "pin" 2 52 "int16" `78 
f B "output_low" 2 52 "void(int16 pin)" `77 
v L "pin" 2 53 "int16" `80 
f B "output_high" 2 53 "void(int16 pin)" `79 
v L "pin" 2 54 "int16" `82 
f B "output_toggle" 2 54 "void(int16 pin)" `81 
v L "pin" 2 55 "int16" `84 
v L "level" 2 55 "int8" `85 
f B "output_bit" 2 55 "void(int16 pin,int8 level)" `83 
v L "pin" 2 56 "int16" `87 
f B "output_float" 2 56 "void(int16 pin)" `86 
v L "pin" 2 57 "int16" `89 
f B "output_drive" 2 57 "void(int16 pin)" `88  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 61 "40"
d G "PIN_A1" 2 62 "41"
d G "PIN_A2" 2 63 "42"
d G "PIN_A3" 2 64 "43"
d G "PIN_A4" 2 65 "44"
d G "PIN_A5" 2 66 "45"
d G "PIN_B0" 2 68 "48"
d G "PIN_B1" 2 69 "49"
d G "PIN_B2" 2 70 "50"
d G "PIN_B3" 2 71 "51"
d G "PIN_B4" 2 72 "52"
d G "PIN_B5" 2 73 "53"
d G "PIN_B6" 2 74 "54"
d G "PIN_B7" 2 75 "55"
d G "PIN_C0" 2 77 "56"
d G "PIN_C1" 2 78 "57"
d G "PIN_C2" 2 79 "58"
d G "PIN_C3" 2 80 "59"
d G "PIN_C4" 2 81 "60"
d G "PIN_C5" 2 82 "61"
d G "PIN_C6" 2 83 "62"
d G "PIN_C7" 2 84 "63"
d G "FALSE" 2 87 "0"
d G "TRUE" 2 88 "1"
d G "BYTE" 2 90 "int8"
d G "BOOLEAN" 2 91 "int1"
d G "getc" 2 93 "getch"
d G "fgetc" 2 94 "getch"
d G "getchar" 2 95 "getch"
d G "putc" 2 96 "putchar"
d G "fputc" 2 97 "putchar"
d G "fgets" 2 98 "gets"
d G "fputs" 2 99 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 104 "int8()" `90 
f B "reset_cpu" 2 105 "void()" `91 
f B "sleep" 2 106 "void()" `92  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 108 "3"
d G "WDT_TIMEOUT" 2 109 "11"
d G "MCLR_FROM_SLEEP" 2 110 "19"
d G "MCLR_FROM_RUN" 2 111 "27"
d G "NORMAL_POWER_UP" 2 112 "25"
d G "BROWNOUT_RESTART" 2 113 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 120 "int8" `94 
f B "setup_timer_0" 2 120 "void(int8 mode)" `93 
v L "value" 2 121 "int8" `96 
f B "set_timer0" 2 121 "void(int8 value)" `95 
f B "get_timer0" 2 122 "int8()" `97 
v L "mode" 2 123 "int8" `99 
v L "prescaler" 2 123 "int8" `100 
f B "setup_counters" 2 123 "void(int8 mode,int8 prescaler)" `98 
v L "value" 2 124 "int8" `102 
f B "set_rtcc" 2 124 "void(int8 value)" `101 
f B "get_rtcc" 2 125 "int8()" `103  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 127 "0"
d G "T0_EXT_L_TO_H" 2 128 "32"
d G "T0_EXT_H_TO_L" 2 129 "48"
d G "T0_DIV_1" 2 131 "8"
d G "T0_DIV_2" 2 132 "0"
d G "T0_DIV_4" 2 133 "1"
d G "T0_DIV_8" 2 134 "2"
d G "T0_DIV_16" 2 135 "3"
d G "T0_DIV_32" 2 136 "4"
d G "T0_DIV_64" 2 137 "5"
d G "T0_DIV_128" 2 138 "6"
d G "T0_DIV_256" 2 139 "7"
d G "T0_8_BIT" 2 142 "0"
d G "RTCC_INTERNAL" 2 144 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 145 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 146 "48"
d G "RTCC_DIV_1" 2 147 "8"
d G "RTCC_DIV_2" 2 148 "0"
d G "RTCC_DIV_4" 2 149 "1"
d G "RTCC_DIV_8" 2 150 "2"
d G "RTCC_DIV_16" 2 151 "3"
d G "RTCC_DIV_32" 2 152 "4"
d G "RTCC_DIV_64" 2 153 "5"
d G "RTCC_DIV_128" 2 154 "6"
d G "RTCC_DIV_256" 2 155 "7"
d G "RTCC_8_BIT" 2 156 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 167 "int16" `105 
f B "setup_wdt" 2 167 "void(int16 mode)" `104 
f B "restart_wdt" 2 168 "void()" `106  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 171 "8"
d G "WDT_36MS" 2 172 "9"
d G "WDT_72MS" 2 173 "10"
d G "WDT_144MS" 2 174 "11"
d G "WDT_288MS" 2 175 "12"
d G "WDT_576MS" 2 176 "13"
d G "WDT_1152MS" 2 177 "14"
d G "WDT_2304MS" 2 178 "15"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 184 "int16" `108 
f B "setup_timer_1" 2 184 "void(int16 mode)" `107 
f B "get_timer1" 2 185 "int16()" `109 
v L "value" 2 186 "int16" `111 
f B "set_timer1" 2 186 "void(int16 value)" `110  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 189 "0"
d G "T1_INTERNAL" 2 190 "0x85"
d G "T1_EXTERNAL" 2 191 "0x87"
d G "T1_EXTERNAL_SYNC" 2 192 "0x83"
d G "T1_CLK_OUT" 2 194 "8"
d G "T1_DIV_BY_1" 2 196 "0"
d G "T1_DIV_BY_2" 2 197 "0x10"
d G "T1_DIV_BY_4" 2 198 "0x20"
d G "T1_DIV_BY_8" 2 199 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 204 "int8" `113 
v L "period" 2 204 "int8" `114 
v L "postscale" 2 204 "int8" `115 
f B "setup_timer_2" 2 204 "void(int8 mode,int8 period,int8 postscale)" `112 
f B "get_timer2" 2 205 "int8()" `116 
v L "value" 2 206 "int8" `118 
f B "set_timer2" 2 206 "void(int8 value)" `117  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 208 "0"
d G "T2_DIV_BY_1" 2 209 "4"
d G "T2_DIV_BY_4" 2 210 "5"
d G "T2_DIV_BY_16" 2 211 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 217 "int32" `120 
f B "setup_ccp1" 2 217 "void(int32 mode)" `119 
v L "mode" 2 218 "int32" `122 
v L "pwm" 2 218 "int8" `123 
f G "setup_ccp1" 2 218 "void(int32 mode,int8 pwm)" `121 
v L "value" 2 219 "int16" `125 
f B "set_pwm1_duty" 2 219 "void(int16 value)" `124  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 221 "0"
d G "CCP_CAPTURE_FE" 2 222 "4"
d G "CCP_CAPTURE_RE" 2 223 "5"
d G "CCP_CAPTURE_DIV_4" 2 224 "6"
d G "CCP_CAPTURE_DIV_16" 2 225 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 226 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 227 "9"
d G "CCP_COMPARE_INT" 2 228 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 229 "0xB"
d G "CCP_PWM" 2 230 "0xC"
d G "CCP_PWM_PLUS_1" 2 231 "0x1c"
d G "CCP_PWM_PLUS_2" 2 232 "0x2c"
d G "CCP_PWM_PLUS_3" 2 233 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 239 "int32" `130 
f B "setup_ccp2" 2 239 "void(int32 mode)" `129 
v L "mode" 2 240 "int32" `132 
v L "pwm" 2 240 "int8" `133 
f G "setup_ccp2" 2 240 "void(int32 mode,int8 pwm)" `131 
v L "value" 2 241 "int16" `135 
f B "set_pwm2_duty" 2 241 "void(int16 value)" `134 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 248 "int32" `140 
f B "setup_spi" 2 248 "void(int32 mode)" `139 
v L "value" 2 249 "int8" `142 
f B "spi_write" 2 249 "void(int8 value)" `141 
f B "spi_read" 2 250 "int8()" `143 
v L "value" 2 251 "int8" `145 
f G "spi_read" 2 251 "int8(int8 value)" `144 
f B "spi_data_in" 2 252 "int8()" `146  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 254 "0x00"
d G "SPI_MASTER" 2 255 "0x20"
d G "SPI_SLAVE" 2 256 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 257 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 258 "0x00"
d G "SPI_CLK_DIV_4" 2 259 "0x00"
d G "SPI_CLK_DIV_16" 2 260 "0x01"
d G "SPI_CLK_DIV_64" 2 261 "0x02"
d G "SPI_CLK_T2" 2 262 "0x03"
d G "SPI_SS_DISABLED" 2 263 "0x01"
d G "SPI_L_TO_H" 2 266 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 267 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 271 "int32" `148 
f B "setup_uart" 2 271 "void(int32 baud)" `147 
v L "baud" 2 272 "int32" `150 
v L "stream" 2 272 "int8" `151 
f G "setup_uart" 2 272 "void(int32 baud,int8 stream)" `149 
v L "baud" 2 273 "int32" `153 
v L "stream" 2 273 "int8" `154 
v L "clock" 2 273 "int32" `155 
f G "setup_uart" 2 273 "void(int32 baud,int8 stream,int32 clock)" `152 
v L "baud" 2 274 "int32" `157 
f B "set_uart_speed" 2 274 "void(int32 baud)" `156 
v L "baud" 2 275 "int32" `159 
v L "stream" 2 275 "int8" `160 
f G "set_uart_speed" 2 275 "void(int32 baud,int8 stream)" `158 
v L "baud" 2 276 "int32" `162 
v L "stream" 2 276 "int8" `163 
v L "clock" 2 276 "int32" `164 
f G "set_uart_speed" 2 276 "void(int32 baud,int8 stream,int32 clock)" `161  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 280 "2"
d G "UART_DATA" 2 281 "4"
c L "set_uart_speed" 2 3 4 "FUNCTION"
v L "mode" 2 287 "int16" `166 
f B "setup_adc" 2 287 "void(int16 mode)" `165 
f B "read_adc" 2 288 "int8()" `167 
v L "mode" 2 289 "int8" `169 
f G "read_adc" 2 289 "int8(int8 mode)" `168 
f G "read_adc" 2 290 "int16()" `170 
v L "mode" 2 291 "int8" `172 
f G "read_adc" 2 291 "int16(int8 mode)" `171 
f B "adc_done" 2 292 "int8()" `173  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 294 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 295 "0x100"
d G "ADC_CLOCK_DIV_8" 2 296 "0x40"
d G "ADC_CLOCK_DIV_32" 2 297 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 298 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "setting" 2 301 "int8" `175 
f B "setup_adc_ports" 2 301 "void(int8 setting)" `174 
v L "channel" 2 302 "int8" `177 
f B "set_adc_channel" 2 302 "void(int8 channel)" `176  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 304 "7" "None"
d G "ALL_ANALOG" 2 305 "0" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 306 "1" "A0 A1 A2 A5 VRefh=A3"
d G "AN0_AN1_AN3" 2 307 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 308 "5" "A0 A1 VRefh=A3"
d G "ANALOG_RA3_REF" 2 309 "1" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 310 "4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 311 "5" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 314 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 315 "1"
d G "ADC_READ_ONLY" 2 316 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 322 "sint8" `179 
f B "abs" 2 322 "sint8(sint8 x)" `178 
v L "x" 2 323 "sint16" `181 
f G "abs" 2 323 "sint16(sint16 x)" `180 
v L "x" 2 324 "sint32" `183 
f G "abs" 2 324 "sint32(sint32 x)" `182 
v L "x" 2 325 "float" `185 
f G "abs" 2 325 "float(float x)" `184 
v L "??65535" 2 326 "int8" `187 
v L "??65535" 2 326 "int8" `188 
f B "_mul" 2 326 "int16(int8 ,int8 )" `186 
v L "??65535" 2 327 "sint8" `187 
v L "??65535" 2 327 "sint8" `191 
f G "_mul" 2 327 "sint16(sint8 ,sint8 )" `189 
v L "??65535" 2 328 "int16" `187 
v L "??65535" 2 328 "int16" `194 
f G "_mul" 2 328 "int32(int16 ,int16 )" `192 
v L "??65535" 2 329 "sint16" `187 
v L "??65535" 2 329 "sint16" `197 
f G "_mul" 2 329 "sint32(sint16 ,sint16 )" `195  "Memory Manipulation Prototypes:"
v L "bank" 2 332 "int8" `199 
v L "offset" 2 332 "int8" `200 
f B "read_bank" 2 332 "int8(int8 bank,int8 offset)" `198 
v L "bank" 2 333 "int8" `202 
v L "offset" 2 333 "int8" `203 
v L "value" 2 333 "int8" `204 
f B "write_bank" 2 333 "void(int8 bank,int8 offset,int8 value)" `201 
v L "dest" 2 334 "*int8" `206 
v L "src" 2 334 "*int8" `207 
f B "strcpy" 2 334 "void(*int8 dest,*int8 src)" `205 
v L "dest" 2 335 "*int8" `209 
v L "src" 2 335 "*int8" `210 
f B "strcopy" 2 335 "void(*int8 dest,*int8 src)" `208 
v L "destination" 2 336 "*int8" `212 
v L "value" 2 336 "int8" `213 
v L "num" 2 336 "int16" `214 
f B "memset" 2 336 "void(*int8 destination,int8 value,int16 num)" `211 
v L "destination" 2 337 "*int8" `216 
v L "source" 2 337 "*int8" `217 
v L "num" 2 337 "int16" `218 
f B "memcpy" 2 337 "void(*int8 destination,*int8 source,int16 num)" `215  "String Prototypes:"
v L "cvalue" 2 340 "int8" `220 
f B "toupper" 2 340 "int8(int8 cvalue)" `219 
v L "cvalue" 2 341 "int8" `222 
f B "tolower" 2 341 "int8(int8 cvalue)" `221 
v L "string" 2 342 "*int8" `224 
v L "cstring" 2 342 "*int8" `225 
f B "sprintf" 2 342 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `223  "Data Manipulators Prototypes:"
v L "address" 2 345 "*int8" `228 
v L "bytes" 2 345 "int8" `229 
v L "value" 2 345 "int8" `230 
f B "shift_left" 2 345 "int8(*int8 address,int8 bytes,int8 value)" `227 
v L "address" 2 346 "*int8" `232 
v L "bytes" 2 346 "int8" `233 
v L "value" 2 346 "int8" `234 
f B "shift_right" 2 346 "int8(*int8 address,int8 bytes,int8 value)" `231 
v L "address" 2 347 "*int8" `236 
v L "bytes" 2 347 "int8" `237 
f B "rotate_left" 2 347 "void(*int8 address,int8 bytes)" `235 
v L "address" 2 348 "*int8" `239 
v L "bytes" 2 348 "int8" `240 
f B "rotate_right" 2 348 "void(*int8 address,int8 bytes)" `238 
v L "value" 2 349 "int8" `242 
f B "swap" 2 349 "void(int8 value)" `241 
v L "var" 2 350 "int16" `244 
v L "offset" 2 350 "int8" `245 
f B "make8" 2 350 "int8(int16 var,int8 offset)" `243 
v L "var" 2 351 "int32" `244 
v L "offset" 2 351 "int8" `248 
f G "make8" 2 351 "int8(int32 var,int8 offset)" `246 
v L "varhigh" 2 352 "int8" `250 
v L "varlow" 2 352 "int8" `251 
f B "make16" 2 352 "int16(int8 varhigh,int8 varlow)" `249 
v L "var1" 2 353 "int16" `253 
f B "make32" 2 353 "int32(int16 var1)" `252 
v L "var1" 2 354 "int16" `255 
v L "var2" 2 354 "int16" `256 
f G "make32" 2 354 "int32(int16 var1,int16 var2)" `254 
v L "var1" 2 355 "int16" `255 
v L "var2" 2 355 "int8" `259 
f G "make32" 2 355 "int32(int16 var1,int8 var2)" `257 
v L "var1" 2 356 "int16" `261 
v L "var2" 2 356 "int8" `262 
v L "var3" 2 356 "int8" `263 
f G "make32" 2 356 "int32(int16 var1,int8 var2,int8 var3)" `260 
v L "var1" 2 357 "int8" `265 
f G "make32" 2 357 "int32(int8 var1)" `264 
v L "var1" 2 358 "int8" `255 
v L "var2" 2 358 "int8" `268 
f G "make32" 2 358 "int32(int8 var1,int8 var2)" `266 
v L "var1" 2 359 "int8" `261 
v L "var2" 2 359 "int8" `262 
v L "var3" 2 359 "int8" `272 
f G "make32" 2 359 "int32(int8 var1,int8 var2,int8 var3)" `269 
v L "var1" 2 360 "int8" `274 
v L "var2" 2 360 "int8" `275 
v L "var3" 2 360 "int8" `276 
v L "var4" 2 360 "int8" `277 
f G "make32" 2 360 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `273 
v L "var1" 2 361 "int8" `255 
v L "var2" 2 361 "int16" `280 
f G "make32" 2 361 "int32(int8 var1,int16 var2)" `278 
v L "var1" 2 362 "int8" `261 
v L "var2" 2 362 "int16" `262 
v L "var3" 2 362 "int8" `284 
f G "make32" 2 362 "int32(int8 var1,int16 var2,int8 var3)" `281 
v L "var1" 2 363 "int8" `261 
v L "var2" 2 363 "int8" `262 
v L "var3" 2 363 "int16" `288 
f G "make32" 2 363 "int32(int8 var1,int8 var2,int16 var3)" `285 
v L "var" 2 364 "int8" `290 
v L "bit" 2 364 "int8" `291 
f B "bit_set" 2 364 "void(int8 var,int8 bit)" `289 
v L "var" 2 365 "int16" `290 
v L "bit" 2 365 "int8" `294 
f G "bit_set" 2 365 "void(int16 var,int8 bit)" `292 
v L "var" 2 366 "int32" `290 
v L "bit" 2 366 "int8" `297 
f G "bit_set" 2 366 "void(int32 var,int8 bit)" `295 
v L "var" 2 367 "int8" `299 
v L "bit" 2 367 "int8" `300 
f B "bit_clear" 2 367 "void(int8 var,int8 bit)" `298 
v L "var" 2 368 "int16" `299 
v L "bit" 2 368 "int8" `303 
f G "bit_clear" 2 368 "void(int16 var,int8 bit)" `301 
v L "var" 2 369 "int32" `299 
v L "bit" 2 369 "int8" `306 
f G "bit_clear" 2 369 "void(int32 var,int8 bit)" `304 
v L "var" 2 370 "int8" `308 
v L "bit" 2 370 "int8" `309 
f B "bit_test" 2 370 "int8(int8 var,int8 bit)" `307 
v L "var" 2 371 "int16" `308 
v L "bit" 2 371 "int8" `312 
f G "bit_test" 2 371 "int8(int16 var,int8 bit)" `310 
v L "var" 2 372 "int32" `308 
v L "bit" 2 372 "int8" `315 
f G "bit_test" 2 372 "int8(int32 var,int8 bit)" `313  "#use delay() Prototypes:"
v L "count" 2 375 "int8" `317 
f B "delay_cycles" 2 375 "void(int8 count)" `316 
v L "time" 2 376 "int16" `319 
f B "delay_ms" 2 376 "void(int16 time)" `318 
v L "time" 2 377 "int16" `321 
f B "delay_us" 2 377 "void(int16 time)" `320  "#use rs232() Prototypes:"
v L "cdata" 2 380 "int8" `323 
f B "putchar" 2 380 "void(int8 cdata)" `322 
v L "cdata" 2 381 "int8" `325 
v L "stream" 2 381 "int8" `326 
f G "putchar" 2 381 "void(int8 cdata,int8 stream)" `324 
v L "string" 2 382 "*int8" `328 
f B "puts" 2 382 "void(*int8 string)" `327 
v L "string" 2 383 "*int8" `330 
v L "stream" 2 383 "int8" `331 
f G "puts" 2 383 "void(*int8 string,int8 stream)" `329 
f B "getch" 2 384 "int8()" `332 
v L "stream" 2 385 "int8" `334 
f G "getch" 2 385 "int8(int8 stream)" `333 
v L "string" 2 386 "*int8" `336 
f B "gets" 2 386 "void(*int8 string)" `335 
v L "string" 2 387 "*int8" `338 
v L "stream" 2 387 "int8" `339 
f G "gets" 2 387 "void(*int8 string,int8 stream)" `337 
f B "kbhit" 2 388 "int8()" `340 
v L "stream" 2 389 "int8" `342 
f G "kbhit" 2 389 "int8(int8 stream)" `341 
v L "string" 2 390 "*int8" `344 
f B "printf" 2 390 "void(*int8 string,*int8 _VA_LIST)" `343 
v L "stream" 2 391 "int8" `347 
v L "string" 2 391 "*int8" `348 
f B "fprintf" 2 391 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `346 
f B "putc_send" 2 392 "void()" `350 
v L "stream" 2 393 "int8" `352 
f B "fputc_send" 2 393 "void(int8 stream)" `351 
f B "rcv_buffer_full" 2 394 "int8()" `353 
v L "stream" 2 395 "int8" `355 
f G "rcv_buffer_full" 2 395 "int8(int8 stream)" `354 
f B "rcv_buffer_bytes" 2 396 "int16()" `356 
v L "stream" 2 397 "int8" `358 
f G "rcv_buffer_bytes" 2 397 "int16(int8 stream)" `357 
f B "tx_buffer_full" 2 398 "int8()" `359 
v L "stream" 2 399 "int8" `361 
f G "tx_buffer_full" 2 399 "int8(int8 stream)" `360 
f B "tx_buffer_bytes" 2 400 "int16()" `362 
v L "stream" 2 401 "int8" `364 
f G "tx_buffer_bytes" 2 401 "int16(int8 stream)" `363  "#use i2c() Prototypes:"
f B "i2c_read" 2 404 "int8()" `365 
v L "stream" 2 405 "int8" `367 
f G "i2c_read" 2 405 "int8(int8 stream)" `366 
v L "stream" 2 406 "int8" `369 
v L "ack" 2 406 "int8" `370 
f G "i2c_read" 2 406 "int8(int8 stream,int8 ack)" `368 
v L "data" 2 407 "int8" `372 
f B "i2c_write" 2 407 "int8(int8 data)" `371 
v L "stream" 2 408 "int8" `374 
v L "data" 2 408 "int8" `375 
f G "i2c_write" 2 408 "int8(int8 stream,int8 data)" `373 
f B "i2c_start" 2 409 "void()" `376 
v L "stream" 2 410 "int8" `378 
f G "i2c_start" 2 410 "void(int8 stream)" `377 
v L "stream" 2 411 "int8" `380 
v L "restart" 2 411 "int8" `381 
f G "i2c_start" 2 411 "void(int8 stream,int8 restart)" `379 
f B "i2c_stop" 2 412 "void()" `382 
v L "stream" 2 413 "int8" `384 
f G "i2c_stop" 2 413 "void(int8 stream)" `383 
f B "i2c_isr_state" 2 414 "int8()" `385 
v L "addr" 2 415 "int8" `387 
f B "i2c_slaveaddr" 2 415 "void(int8 addr)" `386 
v L "stream" 2 416 "int8" `389 
v L "addr" 2 416 "int8" `390 
f G "i2c_slaveaddr" 2 416 "void(int8 stream,int8 addr)" `388 
f B "i2c_poll" 2 417 "int8()" `391 
v L "stream" 2 418 "int8" `393 
f G "i2c_poll" 2 418 "int8(int8 stream)" `392 
v L "baud" 2 419 "int32" `395 
f B "i2c_init" 2 419 "void(int32 baud)" `394 
v L "stream" 2 420 "int8" `397 
v L "baud" 2 420 "int32" `398 
f G "i2c_init" 2 420 "void(int8 stream,int32 baud)" `396  "#use spi() Prototypes:"
f B "spi_xfer" 2 423 "int8()" `399 
f G "spi_xfer" 2 424 "int16()" `400 
f G "spi_xfer" 2 425 "int32()" `401 
v L "data" 2 426 "int8" `403 
f G "spi_xfer" 2 426 "int8(int8 data)" `402 
v L "data" 2 427 "int16" `405 
f G "spi_xfer" 2 427 "int16(int16 data)" `404 
v L "data" 2 428 "int32" `407 
f G "spi_xfer" 2 428 "int32(int32 data)" `406 
v L "stream" 2 429 "int8" `409 
v L "data" 2 429 "int8" `410 
f G "spi_xfer" 2 429 "int8(int8 stream,int8 data)" `408 
v L "stream" 2 430 "int8" `409 
v L "data" 2 430 "int16" `413 
f G "spi_xfer" 2 430 "int16(int8 stream,int16 data)" `411 
v L "stream" 2 431 "int8" `409 
v L "data" 2 431 "int32" `416 
f G "spi_xfer" 2 431 "int32(int8 stream,int32 data)" `414 
v L "stream" 2 432 "int8" `418 
v L "data" 2 432 "int8" `419 
v L "bits" 2 432 "int8" `420 
f G "spi_xfer" 2 432 "int8(int8 stream,int8 data,int8 bits)" `417 
v L "stream" 2 433 "int8" `418 
v L "data" 2 433 "int16" `419 
v L "bits" 2 433 "int8" `424 
f G "spi_xfer" 2 433 "int16(int8 stream,int16 data,int8 bits)" `421 
v L "stream" 2 434 "int8" `418 
v L "data" 2 434 "int32" `419 
v L "bits" 2 434 "int8" `428 
f G "spi_xfer" 2 434 "int32(int8 stream,int32 data,int8 bits)" `425 
v L "baud" 2 435 "int32" `430 
f B "spi_init" 2 435 "void(int32 baud)" `429 
v L "stream" 2 436 "int8" `432 
v L "baud" 2 436 "int32" `433 
f G "spi_init" 2 436 "void(int8 stream,int32 baud)" `431 
v L "baud" 2 437 "int32" `435 
f B "spi_speed" 2 437 "void(int32 baud)" `434 
v L "stream" 2 438 "int8" `437 
v L "baud" 2 438 "int32" `438 
f G "spi_speed" 2 438 "void(int8 stream,int32 baud)" `436 
v L "stream" 2 439 "int8" `440 
v L "baud" 2 439 "int32" `441 
v L "clock" 2 439 "int32" `442 
f G "spi_speed" 2 439 "void(int8 stream,int32 baud,int32 clock)" `439 
v L "data" 2 440 "int8" `444 
f B "spi_prewrite" 2 440 "void(int8 data)" `443 
v L "data" 2 441 "int16" `446 
f G "spi_prewrite" 2 441 "void(int16 data)" `445 
v L "data" 2 442 "int32" `448 
f G "spi_prewrite" 2 442 "void(int32 data)" `447 
v L "??65535" 2 443 "int8" `450 
v L "data" 2 443 "int8" `451 
f G "spi_prewrite" 2 443 "void(int8 ,int8 data)" `449 
v L "??65535" 2 444 "int8" `450 
v L "data" 2 444 "int16" `454 
f G "spi_prewrite" 2 444 "void(int8 ,int16 data)" `452 
v L "??65535" 2 445 "int8" `450 
v L "data" 2 445 "int32" `457 
f G "spi_prewrite" 2 445 "void(int8 ,int32 data)" `455 
f B "spi_xfer_in" 2 446 "int8()" `458 
f G "spi_xfer_in" 2 447 "int16()" `459 
f G "spi_xfer_in" 2 448 "int32()" `460 
v L "bits" 2 449 "int8" `462 
f G "spi_xfer_in" 2 449 "int8(int8 bits)" `461 
v L "bits" 2 450 "int8" `464 
f G "spi_xfer_in" 2 450 "int16(int8 bits)" `463 
v L "bits" 2 451 "int8" `466 
f G "spi_xfer_in" 2 451 "int32(int8 bits)" `465 
v L "stream" 2 452 "int8" `468 
v L "bits" 2 452 "int8" `469 
f G "spi_xfer_in" 2 452 "int8(int8 stream,int8 bits)" `467 
v L "stream" 2 453 "int8" `468 
v L "bits" 2 453 "int8" `472 
f G "spi_xfer_in" 2 453 "int16(int8 stream,int8 bits)" `470 
v L "stream" 2 454 "int8" `468 
v L "bits" 2 454 "int8" `475 
f G "spi_xfer_in" 2 454 "int32(int8 stream,int8 bits)" `473  "#use rtos() Prototypes:"
f B "rtos_run" 2 457 "void()" `476 
f B "rtos_yield" 2 458 "void()" `477 
v L "task" 2 459 "int8" `479 
f B "rtos_enable" 2 459 "void(int8 task)" `478 
v L "task" 2 460 "int8" `481 
f B "rtos_disable" 2 460 "void(int8 task)" `480 
f B "rtos_terminate" 2 461 "void()" `482 
v L "flag" 2 462 "int8" `484 
f B "rtos_await" 2 462 "void(int8 flag)" `483 
v L "sem" 2 463 "int8" `486 
f B "rtos_wait" 2 463 "void(int8 sem)" `485 
v L "sem" 2 464 "int8" `488 
f B "rtos_signal" 2 464 "void(int8 sem)" `487 
v L "task" 2 465 "int8" `490 
v L "msg" 2 465 "int8" `491 
f B "rtos_msg_send" 2 465 "void(int8 task,int8 msg)" `489 
f B "rtos_msg_read" 2 466 "int8()" `492 
f B "rtos_msg_poll" 2 467 "int8()" `493 
v L "task" 2 468 "int8" `495 
f B "rtos_overrun" 2 468 "int8(int8 task)" `494 
v L "task" 2 469 "int8" `497 
v L "stat" 2 469 "*int8" `498 
f B "rtos_stats" 2 469 "void(int8 task,*int8 stat)" `496  "#use timer() Prototypes:"
f B "get_ticks" 2 472 "int8()" `499 
f G "get_ticks" 2 473 "int16()" `500 
f G "get_ticks" 2 474 "int32()" `501 
v L "stream" 2 475 "int8" `503 
f G "get_ticks" 2 475 "int8(int8 stream)" `502 
v L "stream" 2 476 "int8" `505 
f G "get_ticks" 2 476 "int16(int8 stream)" `504 
v L "stream" 2 477 "int8" `507 
f G "get_ticks" 2 477 "int32(int8 stream)" `506 
v L "value" 2 478 "int8" `509 
f B "set_ticks" 2 478 "void(int8 value)" `508 
v L "value" 2 479 "int16" `511 
f G "set_ticks" 2 479 "void(int16 value)" `510 
v L "value" 2 480 "int32" `513 
f G "set_ticks" 2 480 "void(int32 value)" `512 
v L "stream" 2 481 "int8" `515 
v L "value" 2 481 "int8" `516 
f G "set_ticks" 2 481 "void(int8 stream,int8 value)" `514 
v L "stream" 2 482 "int8" `515 
v L "value" 2 482 "int16" `519 
f G "set_ticks" 2 482 "void(int8 stream,int16 value)" `517 
v L "stream" 2 483 "int8" `515 
v L "value" 2 483 "int32" `522 
f G "set_ticks" 2 483 "void(int8 stream,int32 value)" `520  "#use pwm() Prototypes:"
f B "pwm_on" 2 486 "void()" `523 
v L "stream" 2 487 "int8" `525 
f G "pwm_on" 2 487 "void(int8 stream)" `524 
f B "pwm_off" 2 488 "void()" `526 
v L "stream" 2 489 "int8" `528 
f G "pwm_off" 2 489 "void(int8 stream)" `527 
v L "duty" 2 490 "int16" `530 
f B "pwm_set_duty" 2 490 "void(int16 duty)" `529 
v L "stream" 2 491 "int8" `532 
v L "duty" 2 491 "int16" `533 
f G "pwm_set_duty" 2 491 "void(int8 stream,int16 duty)" `531 
v L "percent" 2 492 "int16" `535 
f B "pwm_set_duty_percent" 2 492 "void(int16 percent)" `534 
v L "stream" 2 493 "int8" `537 
v L "percent" 2 493 "int16" `538 
f G "pwm_set_duty_percent" 2 493 "void(int8 stream,int16 percent)" `536 
v L "frequency" 2 494 "int32" `540 
f B "pwm_set_frequency" 2 494 "void(int32 frequency)" `539 
v L "stream" 2 495 "int8" `542 
v L "frequency" 2 495 "int32" `543 
f G "pwm_set_frequency" 2 495 "void(int8 stream,int32 frequency)" `541  "#use capture() Prototypes:"
f B "get_capture_time" 2 498 "int16()" `544 
v L "stream" 2 499 "int8" `546 
f G "get_capture_time" 2 499 "int16(int8 stream)" `545 
f B "get_capture_event" 2 500 "int8()" `547 
v L "stream" 2 501 "int8" `549 
f G "get_capture_event" 2 501 "int8(int8 stream)" `548  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 514 "int16" `551 
f B "goto_address" 2 514 "void(int16 address)" `550 
v L "label" 2 515 "int16" `553 
f B "label_address" 2 515 "int16(int16 label)" `552  "INT"
c L "label_address" 2 3 4 "FUNCTION"
v L "interrupt" 2 522 "int32" `555 
f B "enable_interrupts" 2 522 "void(int32 interrupt)" `554 
v L "interrupt" 2 523 "int32" `557 
f B "disable_interrupts" 2 523 "void(int32 interrupt)" `556 
v L "interrupt" 2 524 "int32" `559 
f B "clear_interrupt" 2 524 "void(int32 interrupt)" `558 
v L "interrupt" 2 525 "int32" `561 
f B "interrupt_active" 2 525 "int8(int32 interrupt)" `560 
v L "interrupt" 2 526 "int32" `563 
f B "interrupt_enabled" 2 526 "int8(int32 interrupt)" `562 
v L "source" 2 527 "int8" `565 
v L "edge" 2 527 "int8" `566 
f B "ext_int_edge" 2 527 "void(int8 source,int8 edge)" `564 
v L "address" 2 528 "int16" `568 
f B "jump_to_irs" 2 528 "void(int16 address)" `567  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 530 "0x40"
d G "H_TO_L" 2 531 "0"
d G "GLOBAL" 2 533 "0x0BC0"
d G "PERIPH" 2 534 "0x0B40"
d G "INT_RTCC" 2 535 "0x000B20"
d G "INT_RB" 2 536 "0x00FF0B08"
d G "INT_EXT_L2H" 2 537 "0x50000B10"
d G "INT_EXT_H2L" 2 538 "0x60000B10"
d G "INT_EXT" 2 539 "0x000B10"
d G "INT_AD" 2 540 "0x008C40"
d G "INT_TBE" 2 541 "0x008C10"
d G "INT_RDA" 2 542 "0x008C20"
d G "INT_TIMER1" 2 543 "0x008C01"
d G "INT_TIMER2" 2 544 "0x008C02"
d G "INT_CCP1" 2 545 "0x008C04"
d G "INT_CCP2" 2 546 "0x008D01"
d G "INT_SSP" 2 547 "0x008C08"
d G "INT_TIMER0" 2 548 "0x000B20"
C L "jump_to_irs" 1 8 1 "FUNCTION"
D G "EEPROM_SDA" 3 40 "PIN_C4"
D G "EEPROM_SCL" 3 41 "PIN_C3"
D G "hi" 3 46 "(x)  (*((int8 *)&x+1))"
D G "EEPROM_ADDRESS" 3 50 "long int"
D G "EEPROM_SIZE" 3 51 "8192"
F G "init_ext_eeprom" 3 53 "void()" `582 
F G "ext_eeprom_ready" 3 58 "int8()" `583 
V L "ack" 3 59 "int1" `584 
C L "ext_eeprom_ready" 3 2 1 "FUNCTION"
C L "ext_eeprom_ready" 3 2 1 "FUNCTION"
V L "address" 3 66 "int16" `586 
V L "data" 3 66 "int8" `587 
F G "write_ext_eeprom" 3 66 "void(int16 address,int8 data)" `585 
V L "address" 3 76 "int16" `589 
F G "read_ext_eeprom" 3 76 "int8(int16 address)" `588 
V L "data" 3 77 "int8" `590 
D G "__LCD_C__" 4 76 ""
T G "LCD_PIN_MAP" 4 90 "{int1 enable,int1 rs,int1 rw,int1 unused,int4 data}" `597  "this is to improve compatability with previous LCD drivers that accepted"
D G "lcd_output_enable" 4 109 "(x) lcdlat.enable=x"
D G "lcd_enable_tris" 4 110 "()   lcdtris.enable=0"
D G "lcd_output_rs" 4 117 "(x) lcdlat.rs=x"
D G "lcd_rs_tris" 4 118 "()   lcdtris.rs=0"
D G "lcd_output_rw" 4 125 "(x) lcdlat.rw=x"
D G "lcd_rw_tris" 4 126 "()   lcdtris.rw=0"
D G "LCD_DATA_PORT" 4 151 "getenv("SFR:PORTB")" "portb"
V G "lcd" 4 161 "LCD_PIN_MAP" `598 
V G "lcdlat" 4 161 "LCD_PIN_MAP" `599 
V G "lcdtris" 4 161 "LCD_PIN_MAP" `600 
D G "LCD_TYPE" 4 179 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "LCD_LINE_TWO" 4 183 "0x40" "LCD RAM address for the second line"
D G "LCD_LINE_LENGTH" 4 187 "20"
f G "lcd_read_nibble" 4 190 "int8()" `601 
F G "lcd_read_byte" 4 193 "int8()" `602 
V L "low" 4 194 "int8" `603 
V L "high" 4 194 "int8" `604 
F G "lcd_read_nibble" 4 240 "int8()" `601 
V L "n" 4 256 "int8" `606 
F G "lcd_send_nibble" 4 257 "void(int8 n)" `605 
V L "address" 4 274 "int8" `608 
V L "n" 4 274 "int8" `609 
F G "lcd_send_byte" 4 275 "void(int8 address,int8 n)" `607 
F G "lcd_init" 4 300 "void()" `610 
V L "i" 4 301 "int8" `611 
V L "LCD_INIT_STRING" 4 302 "int8[4]" `612 
C L "lcd_init" 4 2 2 "FUNCTION"
V L "x" 4 345 "int8" `614 
V L "y" 4 345 "int8" `615 
F G "lcd_gotoxy" 4 346 "void(int8 x,int8 y)" `613 
V L "address" 4 347 "int8" `616 
V L "c" 4 363 "int8" `618 
F G "lcd_putc" 4 364 "void(int8 c)" `617 
V L "x" 4 406 "int8" `620 
V L "y" 4 406 "int8" `621 
F G "lcd_getc" 4 407 "int8(int8 x,int8 y)" `619 
V L "value" 4 408 "int8" `622 
C L "lcd_getc" 4 2 1 "FUNCTION"
C L "lcd_set_cgram_char" 4 2 5 "FUNCTION"
V L "which" 4 424 "int8" `624 
V L "ptr" 4 424 "*int8" `625 
F G "lcd_set_cgram_char" 4 425 "void(int8 which,*int8 ptr)" `623 
V L "i" 4 426 "int8" `626 
C L "lcd_set_cgram_char" 4 2 1 "FUNCTION"
V L "on" 4 443 "int8" `628 
F G "lcd_cursor_on" 4 444 "void(int8 on)" `627 
C L "lcd_cursor_on" 4 2 1 "FUNCTION"
C L "lcd_cursor_on" 4 2 1 "FUNCTION"
D G "_STDLIB" 5 12 ""
D G "RAND_MAX" 5 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 5 27 "0"
T G "div_t" 5 33 "{sint8 quot,sint8 rem}" `632 
T G "ldiv_t" 5 38 "{sint16 quot,sint16 rem}" `636  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 16 "unsigned int8"
D G "size_t" 6 24 "unsigned int16"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
C L "atoi" 5 43 2 "FUNCTION"
C L "atoi" 5 46 1 "*"
C L "atoi" 5 46 1 "*"
V L "s" 5 50 "*int8" `638 
f G "atoi" 5 50 "sint8(*int8 s)" `637  "Syntax: signed int32  atoi32(char * s)"
V L "s" 5 58 "*int8" `640 
f G "atoi32" 5 58 "sint32(*int8 s)" `639  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 5 46 2 "FUNCTION"
V L "num" 5 79 "sint32" `642 
V L "base" 5 79 "int8" `643 
V L "s" 5 79 "*int8" `644 
f G "itoa" 5 79 "*int8(sint32 num,int8 base,*int8 s)" `641  "Standard template: signed int16  atol(char * s)"
C L "itoa" 5 81 1 "*"
C L "itoa" 5 81 1 "*"
V L "s" 5 85 "*int8" `646 
f G "atol" 5 85 "sint16(*int8 s)" `645  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
C L "atol" 5 87 1 "*"
V L "s" 5 93 "*int8" `648 
V L "endptr" 5 93 "*int8" `649 
V L "base" 5 93 "sint8" `650 
f G "strtol" 5 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `647  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
C L "strtol" 5 95 1 "*"
V L "s" 5 101 "*int8" `652 
V L "endptr" 5 101 "*int8" `653 
V L "base" 5 101 "sint8" `654 
f G "strtoul" 5 101 "int16(*int8 s,*int8 endptr,sint8 base)" `651  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 5 95 2 "FUNCTION"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
C L "strtoul" 5 103 1 "*"
V L "s" 5 110 "*int8" `656 
V L "endptr" 5 110 "*int8" `657 
f G "strtof" 5 110 "float(*int8 s,*int8 endptr)" `655  "provided for compatibility"
D G "strtof48" 5 116 "(s,e) strtof(s, e)"
D G "strtod" 5 117 "(s,e) strtof(s, e)"
C L "strtof" 5 103 1 "FUNCTION"
C L "strtof" 5 120 1 "*"
D G "atof" 5 124 "(s)   strtof(s, 0)"
C L "strtof" 5 120 1 "FUNCTION"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
C L "strtof" 5 143 1 "*"
V L "s" 5 149 "*int8" `659 
f G "atoe" 5 149 "float(*int8 s)" `658  "Pseudo-random sequence generation functions"
C L "atoe" 5 143 1 "FUNCTION"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
C L "atoe" 5 160 1 "*"
f G "rand" 5 169 "int16()" `660  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
C L "rand" 5 171 1 "*"
V L "seed" 5 191 "int32" `662 
f G "srand" 5 191 "void(int32 seed)" `661  "Memory management functions"
C L "srand" 5 171 3 "FUNCTION"
V L "string" 5 205 "*int8" `664 
f G "system" 5 205 "sint8(*int8 string)" `663  "Searching and sorting utilities"
C L "system" 5 171 1 "FUNCTION"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 1 "*"
C L "system" 5 211 4 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
C L "system" 5 229 1 "*"
D G "labs" 5 249 "abs"
V L "numer" 5 251 "sint8" `666 
V L "denom" 5 251 "sint8" `667 
f G "div" 5 251 "div_t(sint8 numer,sint8 denom)" `665 
V L "numer" 5 252 "sint16" `669 
V L "denom" 5 252 "sint16" `670 
f G "ldiv" 5 252 "ldiv_t(sint16 numer,sint16 denom)" `668  "Multibyte character functions"
C L "ldiv" 5 229 4 "FUNCTION"
C L "ldiv" 6 2 7 "FUNCTION"
D G "_STRING" 7 12 ""
C L "ldiv" 6 2 7 "FUNCTION"
D G "_CTYPE" 8 12 ""
D G "islower" 8 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 8 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 8 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 8 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 8 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 8 19 "(x)  ((x)==' ')"
D G "isxdigit" 8 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 8 21 "(x)  ((x)<' ')"
D G "isprint" 8 22 "(x)  ((x)>=' ')"
D G "isgraph" 8 23 "(x)  ((x)>' ')"
D G "ispunct" 8 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 7 19 10 "FUNCTION"
V L "s1" 7 34 "*int8" `672 
V L "s2" 7 34 "*int8" `673 
V L "n" 7 34 "int16" `674 
F G "memmove" 7 35 "*int8(*int8 s1,*int8 s2,int16 n)" `671 
V L "sc1" 7 36 "*int8" `675 
V L "sc2" 7 37 "*int8" `676 
D G "strcopy" 7 54 "strcpy"
C L "strncpy" 7 19 4 "FUNCTION"
V L "s1" 7 61 "*int8" `678 
V L "s2" 7 61 "*int8" `679 
V L "n" 7 61 "int16" `680 
F G "strncpy" 7 62 "*int8(*int8 s1,*int8 s2,int16 n)" `677 
V L "s" 7 63 "*int8" `681 
C L "strcat" 7 19 3 "FUNCTION"
V L "s1" 7 78 "*int8" `683 
V L "s2" 7 78 "*int8" `684 
F G "strcat" 7 79 "*int8(*int8 s1,*int8 s2)" `682 
V L "s" 7 80 "*int8" `685 
C L "strncat" 7 19 2 "FUNCTION"
V L "s1" 7 96 "*int8" `687 
V L "s2" 7 96 "*int8" `688 
V L "n" 7 96 "int16" `689 
F G "strncat" 7 97 "*int8(*int8 s1,*int8 s2,int16 n)" `686 
V L "s" 7 98 "*int8" `690 
C L "memcmp" 7 19 3 "FUNCTION"
V L "s1" 7 120 "*int8" `692 
V L "s2" 7 120 "*int8" `693 
V L "n" 7 120 "int16" `694 
F G "memcmp" 7 121 "sint8(*int8 s1,*int8 s2,int16 n)" `691 
V L "su1" 7 122 "*int8" `695 
V L "su2" 7 122 "*int8" `696 
C L "strcmp" 7 19 2 "FUNCTION"
V L "s1" 7 134 "*int8" `698 
V L "s2" 7 134 "*int8" `699 
F G "strcmp" 7 135 "sint8(*int8 s1,*int8 s2)" `697 
C L "strcoll" 7 19 2 "FUNCTION"
V L "s1" 7 144 "*int8" `701 
V L "s2" 7 144 "*int8" `702 
F G "strcoll" 7 145 "sint8(*int8 s1,*int8 s2)" `700 
C L "strncmp" 7 19 4 "FUNCTION"
V L "s1" 7 157 "*int8" `704 
V L "s2" 7 157 "*int8" `705 
V L "n" 7 157 "int16" `706 
F G "strncmp" 7 158 "sint8(*int8 s1,*int8 s2,int16 n)" `703 
C L "strxfrm" 7 19 3 "FUNCTION"
V L "s1" 7 169 "*int8" `708 
V L "s2" 7 169 "*int8" `709 
V L "n" 7 169 "int16" `710 
F G "strxfrm" 7 170 "int16(*int8 s1,*int8 s2,int16 n)" `707 
V L "s" 7 171 "*int8" `711 
V L "n1" 7 172 "int8" `712 
C L "memchr" 7 19 3 "FUNCTION"
V L "s" 7 191 "*int8" `714 
V L "c" 7 191 "int8" `715 
V L "n" 7 191 "int16" `716 
F G "memchr" 7 192 "*int8(*int8 s,int8 c,int16 n)" `713 
V L "uc" 7 193 "int8" `717 
V L "su" 7 194 "*int8" `718 
C L "strchr" 7 19 2 "FUNCTION"
V L "s" 7 205 "*int8" `720 
V L "c" 7 205 "int8" `721 
F G "strchr" 7 206 "*int8(*int8 s,int8 c)" `719 
C L "strcspn" 7 19 4 "FUNCTION"
V L "s1" 7 217 "*int8" `723 
V L "s2" 7 217 "*int8" `724 
F G "strcspn" 7 218 "int8(*int8 s1,*int8 s2)" `722 
V L "sc1" 7 219 "*int8" `725 
V L "sc2" 7 219 "*int8" `726 
C L "strpbrk" 7 19 4 "FUNCTION"
V L "s1" 7 232 "*int8" `728 
V L "s2" 7 232 "*int8" `729 
F G "strpbrk" 7 233 "*int8(*int8 s1,*int8 s2)" `727 
V L "sc1" 7 234 "*int8" `730 
V L "sc2" 7 234 "*int8" `731 
C L "strrchr" 7 19 2 "FUNCTION"
V L "s" 7 247 "*int8" `733 
V L "c" 7 247 "int8" `734 
F G "strrchr" 7 248 "*int8(*int8 s,int8 c)" `732 
V L "p" 7 249 "*int8" `735 
C L "strspn" 7 19 2 "FUNCTION"
V L "s1" 7 262 "*int8" `737 
V L "s2" 7 262 "*int8" `738 
F G "strspn" 7 263 "int8(*int8 s1,*int8 s2)" `736 
V L "sc1" 7 264 "*int8" `739 
V L "sc2" 7 264 "*int8" `740 
C L "strstr" 7 19 6 "FUNCTION"
V L "s1" 7 281 "*int8" `742 
V L "s2" 7 281 "*int8" `743 
F G "strstr" 7 282 "*int8(*int8 s1,*int8 s2)" `741 
V L "s" 7 283 "*int8" `744 
V L "t" 7 283 "*int8" `745 
C L "strtok" 7 19 13 "FUNCTION"
V L "s1" 7 320 "*int8" `747 
V L "s2" 7 320 "*int8" `748 
F G "strtok" 7 321 "*int8(*int8 s1,*int8 s2)" `746 
V L "beg" 7 322 "*int8" `749 
V L "end" 7 322 "*int8" `750 
V L "save" 7 323 "*int8" `751 
C L "strlen" 7 19 6 "FUNCTION"
V L "s" 7 369 "*int8" `753 
F G "strlen" 7 370 "int8(*int8 s)" `752 
V L "sc" 7 371 "*int8" `754 
C L "stricmp" 7 19 2 "FUNCTION"
V L "s1" 7 380 "*int8" `756 
V L "s2" 7 380 "*int8" `757 
F G "stricmp" 7 381 "sint8(*int8 s1,*int8 s2)" `755 
C L "strlwr" 7 19 3 "FUNCTION"
V L "s" 7 394 "*int8" `761 
F G "strlwr" 7 395 "*int8(*int8 s)" `760 
V L "p" 7 396 "*int8" `762 
C L "strupr" 7 19 3 "FUNCTION"
V L "s" 7 408 "*int8" `764 
F G "strupr" 7 409 "*int8(*int8 s)" `763 
V L "p" 7 410 "*int8" `765 
V L "numer" 5 274 "sint8" `666 
V L "denom" 5 274 "sint8" `768 
F G "div" 5 275 "div_t(sint8 numer,sint8 denom)" `665 
V L "val" 5 276 "div_t" `766 
V L "numer" 5 282 "sint16" `669 
V L "denom" 5 282 "sint16" `775 
F G "ldiv" 5 283 "ldiv_t(sint16 numer,sint16 denom)" `668 
V L "val" 5 284 "ldiv_t" `773 
V L "s" 5 361 "*int8" `781 
F G "atoe" 5 362 "float(*int8 s)" `658 
V L "pow10" 5 363 "float" `780 
V L "result" 5 364 "float" `781 
V L "sign" 5 365 "int8" `782 
V L "expsign" 5 366 "int8" `783 
V L "c" 5 367 "int8" `784 
V L "ptr" 5 368 "int8" `785 
V L "i" 5 369 "int8" `786 
V L "exp" 5 370 "float" `787 
V L "expcnt" 5 371 "int8" `788 
C L "atoe" 5 397 1 "FUNCTION"
V L "s" 5 429 "*int8" `801 
F G "atoi" 5 430 "sint8(*int8 s)" `637 
V L "result" 5 431 "sint8" `800 
V L "sign" 5 432 "int8" `801 
V L "base" 5 432 "int8" `802 
V L "index" 5 432 "int8" `803 
V L "c" 5 433 "int8" `804 
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
C L "atoi" 5 397 1 "FUNCTION"
V L "s" 5 498 "*int8" `806 
F G "atol" 5 499 "sint16(*int8 s)" `645 
V L "result" 5 500 "sint16" `805 
V L "sign" 5 501 "int8" `806 
V L "base" 5 501 "int8" `807 
V L "index" 5 501 "int8" `808 
V L "c" 5 502 "int8" `809 
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "atol" 5 397 1 "FUNCTION"
C L "mult_with10" 5 397 1 "FUNCTION"
V L "num" 5 565 "int32" `811 
F G "mult_with10" 5 566 "sint32(int32 num)" `810 
V L "s" 5 571 "*int8" `813 
F G "atoi32" 5 572 "sint32(*int8 s)" `639 
V L "result" 5 573 "sint32" `812 
V L "sign" 5 574 "int8" `813 
V L "base" 5 574 "int8" `814 
V L "index" 5 574 "int8" `815 
V L "c" 5 575 "int8" `816 
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
C L "atoi32" 5 397 1 "FUNCTION"
V L "num" 5 770 "sint32" `642 
V L "base" 5 770 "int8" `643 
V L "s" 5 770 "*int8" `820 
F G "itoa" 5 771 "*int8(sint32 num,int8 base,*int8 s)" `641 
V L "temp" 5 772 "int32" `817 
V L "i" 5 773 "int8" `818 
V L "sign" 5 773 "int8" `819 
V L "cnt" 5 773 "int8" `820 
V L "c" 5 774 "int8" `821 
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
C L "itoa" 5 397 1 "FUNCTION"
V L "s" 5 885 "*int8" `656 
V L "endptr" 5 885 "*int8" `830 
F G "strtof" 5 886 "float(*int8 s,*int8 endptr)" `655 
V L "pow10" 5 887 "float" `828 
V L "result" 5 888 "float" `829 
V L "skip" 5 889 "int1" `830 
V L "sign" 5 889 "int1" `831 
V L "point" 5 889 "int1" `832 
V L "c" 5 890 "int8" `833 
V L "ptr" 5 891 "int8" `834 
V L "s" 5 1103 "*int8" `652 
V L "endptr" 5 1103 "*int8" `653 
V L "base" 5 1103 "sint8" `839 
F G "strtoul" 5 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `651 
V L "sc" 5 1105 "*int8" `836 
V L "s1" 5 1105 "*int8" `837 
V L "sd" 5 1105 "*int8" `838 
V L "x" 5 1106 "int16" `839 
V L "sign" 5 1107 "int8" `840 
V L "digits" 5 1108 "int8[1]" `841 
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
C L "strtoul" 5 397 1 "FUNCTION"
V L "s" 5 1165 "*int8" `648 
V L "endptr" 5 1165 "*int8" `649 
V L "base" 5 1165 "sint8" `846 
F G "strtol" 5 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `647 
V L "sc" 5 1167 "*int8" `843 
V L "s1" 5 1167 "*int8" `844 
V L "sd" 5 1167 "*int8" `845 
V L "x" 5 1168 "sint16" `846 
V L "sign" 5 1169 "int8" `847 
V L "digits" 5 1170 "int8[1]" `848 
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
C L "strtol" 5 397 1 "FUNCTION"
V L "string" 5 1228 "*int8" `851 
F G "system" 5 1229 "sint8(*int8 string)" `663 
V L "s" 5 1233 "*int8" `851 
V L "n" 5 1233 "int16" `852 
F G "mblen" 5 1234 "int8(*int8 s,int16 n)" `850 
V L "pwc" 5 1238 "*int8" `854 
V L "s" 5 1238 "*int8" `855 
V L "n" 5 1238 "int16" `856 
F G "mbtowc" 5 1239 "int8(*int8 pwc,*int8 s,int16 n)" `853 
V L "s" 5 1244 "*int8" `858 
V L "wchar" 5 1244 "int8" `859 
F G "wctomb" 5 1245 "int8(*int8 s,int8 wchar)" `857 
V L "pwcs" 5 1250 "*int8" `861 
V L "s" 5 1250 "*int8" `862 
V L "n" 5 1250 "int16" `863 
F G "mbstowcs" 5 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `860 
V L "s" 5 1256 "*int8" `865 
V L "pwcs" 5 1256 "*int8" `866 
V L "n" 5 1256 "int16" `867 
F G "wcstombs" 5 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `864 
V G "_Randseed" 5 1266 "int32" `868 
F G "rand" 5 1269 "int16()" `660 
V L "seed" 5 1274 "int32" `873 
F G "srand" 5 1275 "void(int32 seed)" `661 
V L "p1" 5 1284 "*int8" `873 
V L "p2" 5 1284 "*int8" `874 
T G "*_Cmpfun" 5 1284 "sint8(*int8 p1,*int8 p2)" `872 
V L "qdata" 5 1291 "*int8" `877 
V L "qitems" 5 1291 "int8" `878 
V L "qsize" 5 1291 "int8" `879 
V L "cmp" 5 1291 "_Cmpfun" `880 
F G "qsort" 5 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `876 
V L "m" 5 1292 "int8" `881 
V L "j" 5 1292 "int8" `882 
V L "i" 5 1292 "int8" `883 
V L "l" 5 1292 "int8" `884 
V L "done" 5 1293 "int1" `885 
V L "t" 5 1294 "int8[16]" `886 
V L "key" 5 1319 "*int8" `889 
V L "base" 5 1319 "*int8" `890 
V L "num" 5 1319 "int16" `891 
V L "width" 5 1319 "int16" `892 
V L "cmp" 5 1319 "_Cmpfun" `893 
F G "bsearch" 5 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `888 
V L "p" 5 1321 "*int8" `894 
V L "q" 5 1321 "*int8" `895 
V L "n" 5 1322 "int16" `896 
V L "pivot" 5 1323 "int16" `897 
V L "val" 5 1324 "sint8" `898 
C L "bsearch" 5 397 1 "FUNCTION"
V G "NewState" 0 6 "int8" `902 
V G "OldState" 0 6 "int8" `903 
V G "OldVol" 0 6 "int8" `904 
V G "upState" 0 6 "int8" `905 
V G "downState" 0 6 "int8" `906 
V G "OldBtnW" 0 6 "int8" `907 
V G "OldBtnR" 0 6 "int8" `908 
V G "Vol" 0 7 "int8" `909 
V G "duty" 0 8 "int8[3]" `910 
f G "EncoderScan" 0 10 "void()" `911 
f G "LcdOut" 0 11 "void()" `912 
F G "TIMER2_isr" 0 16 "void()" `913 
D G "LCD_ENABLE_PIN" 0 21 "PIN_B0"
D G "LCD_RS_PIN" 0 22 "PIN_B1"
D G "LCD_RW_PIN" 0 23 "PIN_B2"
D G "LCD_DATA4" 0 24 "PIN_B4"
D G "LCD_DATA5" 0 25 "PIN_B5"
D G "LCD_DATA6" 0 26 "PIN_B6"
D G "LCD_DATA7" 0 27 "PIN_B7"
F G "EncoderScan" 0 31 "void()" `911 
F G "LcdOut" 0 77 "void()" `912 
F G "MAIN" 0 90 "void()" `917 
C L "MAIN" 0 91 1 "FUNCTION"
C L "MAIN" 0 91 1 "FUNCTION"
C L "MAIN" 0 91 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
